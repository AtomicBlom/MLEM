### YamlMime:ManagedReference
items:
- uid: MLEM.Extensions.ColorExtensions
  commentId: T:MLEM.Extensions.ColorExtensions
  id: ColorExtensions
  parent: MLEM.Extensions
  children:
  - MLEM.Extensions.ColorExtensions.CopyAlpha(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)
  - MLEM.Extensions.ColorExtensions.FromHex(System.String)
  - MLEM.Extensions.ColorExtensions.FromHex(System.UInt32)
  - MLEM.Extensions.ColorExtensions.Invert(Microsoft.Xna.Framework.Color)
  langs:
  - csharp
  - vb
  name: ColorExtensions
  nameWithType: ColorExtensions
  fullName: MLEM.Extensions.ColorExtensions
  type: Class
  source:
    remote:
      path: MLEM/Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: ColorExtensions
    path: ../MLEM/Extensions/ColorExtensions.cs
    startLine: 8
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: "\nA set of extensions for dealing with <xref href=\"Microsoft.Xna.Framework.Color\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: public static class ColorExtensions
    content.vb: Public Module ColorExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MLEM.Extensions.ColorExtensions.Invert(Microsoft.Xna.Framework.Color)
  commentId: M:MLEM.Extensions.ColorExtensions.Invert(Microsoft.Xna.Framework.Color)
  id: Invert(Microsoft.Xna.Framework.Color)
  isExtensionMethod: true
  parent: MLEM.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: Invert(Color)
  nameWithType: ColorExtensions.Invert(Color)
  fullName: MLEM.Extensions.ColorExtensions.Invert(Microsoft.Xna.Framework.Color)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Invert
    path: ../MLEM/Extensions/ColorExtensions.cs
    startLine: 15
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: "\nReturns an inverted version of the color.\n"
  example: []
  syntax:
    content: public static Color Invert(this Color color)
    parameters:
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color to invert
    return:
      type: Microsoft.Xna.Framework.Color
      description: The inverted color
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Invert(color As Color) As Color
  overload: MLEM.Extensions.ColorExtensions.Invert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Extensions.ColorExtensions.FromHex(System.UInt32)
  commentId: M:MLEM.Extensions.ColorExtensions.FromHex(System.UInt32)
  id: FromHex(System.UInt32)
  parent: MLEM.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: FromHex(UInt32)
  nameWithType: ColorExtensions.FromHex(UInt32)
  fullName: MLEM.Extensions.ColorExtensions.FromHex(System.UInt32)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: FromHex
    path: ../MLEM/Extensions/ColorExtensions.cs
    startLine: 25
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: "\nParses a hexadecimal number into a color.\nThe number should be in the format <code>0xaarrggbb</code>.\n"
  example: []
  syntax:
    content: public static Color FromHex(uint value)
    parameters:
    - id: value
      type: System.UInt32
      description: The number to parse
    return:
      type: Microsoft.Xna.Framework.Color
      description: The resulting color
    content.vb: Public Shared Function FromHex(value As UInteger) As Color
  overload: MLEM.Extensions.ColorExtensions.FromHex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Extensions.ColorExtensions.FromHex(System.String)
  commentId: M:MLEM.Extensions.ColorExtensions.FromHex(System.String)
  id: FromHex(System.String)
  parent: MLEM.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: FromHex(String)
  nameWithType: ColorExtensions.FromHex(String)
  fullName: MLEM.Extensions.ColorExtensions.FromHex(System.String)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: FromHex
    path: ../MLEM/Extensions/ColorExtensions.cs
    startLine: 35
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: "\nParses a hexadecimal string into a color.\nThe string can optionally start with a <code>#</code>.\n"
  example: []
  syntax:
    content: public static Color FromHex(string value)
    parameters:
    - id: value
      type: System.String
      description: The string to parse
    return:
      type: Microsoft.Xna.Framework.Color
      description: The resulting color
    content.vb: Public Shared Function FromHex(value As String) As Color
  overload: MLEM.Extensions.ColorExtensions.FromHex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Extensions.ColorExtensions.CopyAlpha(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)
  commentId: M:MLEM.Extensions.ColorExtensions.CopyAlpha(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)
  id: CopyAlpha(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)
  isExtensionMethod: true
  parent: MLEM.Extensions.ColorExtensions
  langs:
  - csharp
  - vb
  name: CopyAlpha(Color, Color)
  nameWithType: ColorExtensions.CopyAlpha(Color, Color)
  fullName: MLEM.Extensions.ColorExtensions.CopyAlpha(Microsoft.Xna.Framework.Color, Microsoft.Xna.Framework.Color)
  type: Method
  source:
    remote:
      path: MLEM/Extensions/ColorExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: CopyAlpha
    path: ../MLEM/Extensions/ColorExtensions.cs
    startLine: 47
  assemblies:
  - MLEM
  namespace: MLEM.Extensions
  summary: "\nCopies the alpha value from another color into this color.\n"
  example: []
  syntax:
    content: public static Color CopyAlpha(this Color color, Color other)
    parameters:
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color
    - id: other
      type: Microsoft.Xna.Framework.Color
      description: The color to copy the alpha from
    return:
      type: Microsoft.Xna.Framework.Color
      description: The first color with the second color&apos;s alpha value
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyAlpha(color As Color, other As Color) As Color
  overload: MLEM.Extensions.ColorExtensions.CopyAlpha*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: MLEM.Extensions
  commentId: N:MLEM.Extensions
  name: MLEM.Extensions
  nameWithType: MLEM.Extensions
  fullName: MLEM.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Extensions.ColorExtensions.Invert*
  commentId: Overload:MLEM.Extensions.ColorExtensions.Invert
  name: Invert
  nameWithType: ColorExtensions.Invert
  fullName: MLEM.Extensions.ColorExtensions.Invert
- uid: MLEM.Extensions.ColorExtensions.FromHex*
  commentId: Overload:MLEM.Extensions.ColorExtensions.FromHex
  name: FromHex
  nameWithType: ColorExtensions.FromHex
  fullName: MLEM.Extensions.ColorExtensions.FromHex
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Extensions.ColorExtensions.CopyAlpha*
  commentId: Overload:MLEM.Extensions.ColorExtensions.CopyAlpha
  name: CopyAlpha
  nameWithType: ColorExtensions.CopyAlpha
  fullName: MLEM.Extensions.ColorExtensions.CopyAlpha
