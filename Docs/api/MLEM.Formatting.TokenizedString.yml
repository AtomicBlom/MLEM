### YamlMime:ManagedReference
items:
- uid: MLEM.Formatting.TokenizedString
  commentId: T:MLEM.Formatting.TokenizedString
  id: TokenizedString
  parent: MLEM.Formatting
  children:
  - MLEM.Formatting.TokenizedString.AllCodes
  - MLEM.Formatting.TokenizedString.DisplayString
  - MLEM.Formatting.TokenizedString.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  - MLEM.Formatting.TokenizedString.GetTokenUnderPos(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  - MLEM.Formatting.TokenizedString.Measure(MLEM.Font.GenericFont)
  - MLEM.Formatting.TokenizedString.RawString
  - MLEM.Formatting.TokenizedString.Split(MLEM.Font.GenericFont,System.Single,System.Single)
  - MLEM.Formatting.TokenizedString.String
  - MLEM.Formatting.TokenizedString.Tokens
  - MLEM.Formatting.TokenizedString.Update(Microsoft.Xna.Framework.GameTime)
  langs:
  - csharp
  - vb
  name: TokenizedString
  nameWithType: TokenizedString
  fullName: MLEM.Formatting.TokenizedString
  type: Class
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: TokenizedString
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 14
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nA tokenized string that was created using a <xref href=\"MLEM.Formatting.TextFormatter\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: 'public class TokenizedString : GenericDataHolder'
    content.vb: >-
      Public Class TokenizedString

          Inherits GenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MLEM.Formatting.TokenizedString.RawString
  commentId: F:MLEM.Formatting.TokenizedString.RawString
  id: RawString
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: RawString
  nameWithType: TokenizedString.RawString
  fullName: MLEM.Formatting.TokenizedString.RawString
  type: Field
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: RawString
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 19
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe raw string that was used to create this tokenized string.\n"
  example: []
  syntax:
    content: public readonly string RawString
    return:
      type: System.String
    content.vb: Public ReadOnly RawString As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.TokenizedString.String
  commentId: F:MLEM.Formatting.TokenizedString.String
  id: String
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: String
  nameWithType: TokenizedString.String
  fullName: MLEM.Formatting.TokenizedString.String
  type: Field
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: String
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 23
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe <xref href=\"MLEM.Formatting.TokenizedString.RawString\" data-throw-if-not-resolved=\"false\"></xref>, but with formatting codes stripped out.\n"
  example: []
  syntax:
    content: public readonly string String
    return:
      type: System.String
    content.vb: Public ReadOnly String As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.TokenizedString.DisplayString
  commentId: P:MLEM.Formatting.TokenizedString.DisplayString
  id: DisplayString
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: DisplayString
  nameWithType: TokenizedString.DisplayString
  fullName: MLEM.Formatting.TokenizedString.DisplayString
  type: Property
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: DisplayString
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 28
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe string that is actually displayed by this tokenized string.\nIf this string has been <xref href=\"MLEM.Formatting.TokenizedString.Split(MLEM.Font.GenericFont%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>, this string will contain the newline characters.\n"
  example: []
  syntax:
    content: public string DisplayString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayString As String
  overload: MLEM.Formatting.TokenizedString.DisplayString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.TokenizedString.Tokens
  commentId: F:MLEM.Formatting.TokenizedString.Tokens
  id: Tokens
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: Tokens
  nameWithType: TokenizedString.Tokens
  fullName: MLEM.Formatting.TokenizedString.Tokens
  type: Field
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Tokens
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 32
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe tokens that this tokenized string contains.\n"
  example: []
  syntax:
    content: public readonly Token[] Tokens
    return:
      type: MLEM.Formatting.Token[]
    content.vb: Public ReadOnly Tokens As Token()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.TokenizedString.AllCodes
  commentId: F:MLEM.Formatting.TokenizedString.AllCodes
  id: AllCodes
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: AllCodes
  nameWithType: TokenizedString.AllCodes
  fullName: MLEM.Formatting.TokenizedString.AllCodes
  type: Field
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: AllCodes
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 37
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nAll of the formatting codes that are applied over this tokenized string.\nNote that, to get a formatting code for a certain token, use <xref href=\"MLEM.Formatting.Token.AppliedCodes\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public readonly Code[] AllCodes
    return:
      type: MLEM.Formatting.Codes.Code[]
    content.vb: Public ReadOnly AllCodes As Code()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.TokenizedString.Split(MLEM.Font.GenericFont,System.Single,System.Single)
  commentId: M:MLEM.Formatting.TokenizedString.Split(MLEM.Font.GenericFont,System.Single,System.Single)
  id: Split(MLEM.Font.GenericFont,System.Single,System.Single)
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: Split(GenericFont, Single, Single)
  nameWithType: TokenizedString.Split(GenericFont, Single, Single)
  fullName: MLEM.Formatting.TokenizedString.Split(MLEM.Font.GenericFont, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Split
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 56
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nSplits this tokenized string, inserting newline characters if the width of the string is bigger than the maximum width.\n<xref href=\"MLEM.Font.GenericFont.SplitString(System.String%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public void Split(GenericFont font, float width, float scale)
    parameters:
    - id: font
      type: MLEM.Font.GenericFont
      description: The font to use for width calculations
    - id: width
      type: System.Single
      description: The maximum width
    - id: scale
      type: System.Single
      description: The scale to use fr width calculations
    content.vb: Public Sub Split(font As GenericFont, width As Single, scale As Single)
  overload: MLEM.Formatting.TokenizedString.Split*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.TokenizedString.Measure(MLEM.Font.GenericFont)
  commentId: M:MLEM.Formatting.TokenizedString.Measure(MLEM.Font.GenericFont)
  id: Measure(MLEM.Font.GenericFont)
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: Measure(GenericFont)
  nameWithType: TokenizedString.Measure(GenericFont)
  fullName: MLEM.Formatting.TokenizedString.Measure(MLEM.Font.GenericFont)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Measure
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 87
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  example: []
  syntax:
    content: public Vector2 Measure(GenericFont font)
    parameters:
    - id: font
      type: MLEM.Font.GenericFont
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: Public Function Measure(font As GenericFont) As Vector2
  overload: MLEM.Formatting.TokenizedString.Measure*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.TokenizedString.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:MLEM.Formatting.TokenizedString.Update(Microsoft.Xna.Framework.GameTime)
  id: Update(Microsoft.Xna.Framework.GameTime)
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: Update(GameTime)
  nameWithType: TokenizedString.Update(GameTime)
  fullName: MLEM.Formatting.TokenizedString.Update(Microsoft.Xna.Framework.GameTime)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Update
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 95
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nUpdates the formatting codes in this formatted string, causing animations to animate etc.\n"
  example: []
  syntax:
    content: public void Update(GameTime time)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The game&apos;s time
    content.vb: Public Sub Update(time As GameTime)
  overload: MLEM.Formatting.TokenizedString.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.TokenizedString.GetTokenUnderPos(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:MLEM.Formatting.TokenizedString.GetTokenUnderPos(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  id: GetTokenUnderPos(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: GetTokenUnderPos(Vector2, Vector2, Single)
  nameWithType: TokenizedString.GetTokenUnderPos(Vector2, Vector2, Single)
  fullName: MLEM.Formatting.TokenizedString.GetTokenUnderPos(Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetTokenUnderPos
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 108
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nReturns the token under the given position.\nThis can be used for hovering effects when the mouse is over a token, etc.\n"
  example: []
  syntax:
    content: public Token GetTokenUnderPos(Vector2 stringPos, Vector2 target, float scale)
    parameters:
    - id: stringPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the string is drawn at
    - id: target
      type: Microsoft.Xna.Framework.Vector2
      description: The position to use for checking the token
    - id: scale
      type: System.Single
      description: The scale that the string is drawn at
    return:
      type: MLEM.Formatting.Token
      description: The token under the target position
    content.vb: Public Function GetTokenUnderPos(stringPos As Vector2, target As Vector2, scale As Single) As Token
  overload: MLEM.Formatting.TokenizedString.GetTokenUnderPos*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.TokenizedString.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  commentId: M:MLEM.Formatting.TokenizedString.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  id: Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  parent: MLEM.Formatting.TokenizedString
  langs:
  - csharp
  - vb
  name: Draw(GameTime, SpriteBatch, Vector2, GenericFont, Color, Single, Single)
  nameWithType: TokenizedString.Draw(GameTime, SpriteBatch, Vector2, GenericFont, Color, Single, Single)
  fullName: MLEM.Formatting.TokenizedString.Draw(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, MLEM.Font.GenericFont, Microsoft.Xna.Framework.Color, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/TokenizedString.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Draw
    path: ../MLEM/Formatting/TokenizedString.cs
    startLine: 113
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  example: []
  syntax:
    content: public void Draw(GameTime time, SpriteBatch batch, Vector2 pos, GenericFont font, Color color, float scale, float depth)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
    - id: font
      type: MLEM.Font.GenericFont
    - id: color
      type: Microsoft.Xna.Framework.Color
    - id: scale
      type: System.Single
    - id: depth
      type: System.Single
    content.vb: Public Sub Draw(time As GameTime, batch As SpriteBatch, pos As Vector2, font As GenericFont, color As Color, scale As Single, depth As Single)
  overload: MLEM.Formatting.TokenizedString.Draw*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: MLEM.Formatting.TextFormatter
  commentId: T:MLEM.Formatting.TextFormatter
  parent: MLEM.Formatting
  name: TextFormatter
  nameWithType: TextFormatter
  fullName: MLEM.Formatting.TextFormatter
- uid: MLEM.Formatting
  commentId: N:MLEM.Formatting
  name: MLEM.Formatting
  nameWithType: MLEM.Formatting
  fullName: MLEM.Formatting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Formatting.TokenizedString.RawString
  commentId: F:MLEM.Formatting.TokenizedString.RawString
  isExternal: true
- uid: MLEM.Formatting.TokenizedString.Split(MLEM.Font.GenericFont,System.Single,System.Single)
  commentId: M:MLEM.Formatting.TokenizedString.Split(MLEM.Font.GenericFont,System.Single,System.Single)
  isExternal: true
- uid: MLEM.Formatting.TokenizedString.DisplayString*
  commentId: Overload:MLEM.Formatting.TokenizedString.DisplayString
  name: DisplayString
  nameWithType: TokenizedString.DisplayString
  fullName: MLEM.Formatting.TokenizedString.DisplayString
- uid: MLEM.Formatting.Token[]
  isExternal: true
  name: Token[]
  nameWithType: Token[]
  fullName: MLEM.Formatting.Token[]
  nameWithType.vb: Token()
  fullName.vb: MLEM.Formatting.Token()
  name.vb: Token()
  spec.csharp:
  - uid: MLEM.Formatting.Token
    name: Token
    nameWithType: Token
    fullName: MLEM.Formatting.Token
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Formatting.Token
    name: Token
    nameWithType: Token
    fullName: MLEM.Formatting.Token
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Formatting.Token.AppliedCodes
  commentId: F:MLEM.Formatting.Token.AppliedCodes
  isExternal: true
- uid: MLEM.Formatting.Codes.Code[]
  isExternal: true
  name: Code[]
  nameWithType: Code[]
  fullName: MLEM.Formatting.Codes.Code[]
  nameWithType.vb: Code()
  fullName.vb: MLEM.Formatting.Codes.Code()
  name.vb: Code()
  spec.csharp:
  - uid: MLEM.Formatting.Codes.Code
    name: Code
    nameWithType: Code
    fullName: MLEM.Formatting.Codes.Code
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Formatting.Codes.Code
    name: Code
    nameWithType: Code
    fullName: MLEM.Formatting.Codes.Code
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Font.GenericFont.SplitString(System.String,System.Single,System.Single)
  commentId: M:MLEM.Font.GenericFont.SplitString(System.String,System.Single,System.Single)
  parent: MLEM.Font.GenericFont
  isExternal: true
  name: SplitString(String, Single, Single)
  nameWithType: GenericFont.SplitString(String, Single, Single)
  fullName: MLEM.Font.GenericFont.SplitString(System.String, System.Single, System.Single)
  spec.csharp:
  - uid: MLEM.Font.GenericFont.SplitString(System.String,System.Single,System.Single)
    name: SplitString
    nameWithType: GenericFont.SplitString
    fullName: MLEM.Font.GenericFont.SplitString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Font.GenericFont.SplitString(System.String,System.Single,System.Single)
    name: SplitString
    nameWithType: GenericFont.SplitString
    fullName: MLEM.Font.GenericFont.SplitString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Formatting.TokenizedString.Split*
  commentId: Overload:MLEM.Formatting.TokenizedString.Split
  name: Split
  nameWithType: TokenizedString.Split
  fullName: MLEM.Formatting.TokenizedString.Split
- uid: MLEM.Font.GenericFont
  commentId: T:MLEM.Font.GenericFont
  parent: MLEM.Font
  name: GenericFont
  nameWithType: GenericFont
  fullName: MLEM.Font.GenericFont
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Font
  commentId: N:MLEM.Font
  name: MLEM.Font
  nameWithType: MLEM.Font
  fullName: MLEM.Font
- uid: MLEM.Font.GenericFont.MeasureString(System.String)
  commentId: M:MLEM.Font.GenericFont.MeasureString(System.String)
  parent: MLEM.Font.GenericFont
  isExternal: true
  name: MeasureString(String)
  nameWithType: GenericFont.MeasureString(String)
  fullName: MLEM.Font.GenericFont.MeasureString(System.String)
  spec.csharp:
  - uid: MLEM.Font.GenericFont.MeasureString(System.String)
    name: MeasureString
    nameWithType: GenericFont.MeasureString
    fullName: MLEM.Font.GenericFont.MeasureString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Font.GenericFont.MeasureString(System.String)
    name: MeasureString
    nameWithType: GenericFont.MeasureString
    fullName: MLEM.Font.GenericFont.MeasureString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Formatting.TokenizedString.Measure*
  commentId: Overload:MLEM.Formatting.TokenizedString.Measure
  name: Measure
  nameWithType: TokenizedString.Measure
  fullName: MLEM.Formatting.TokenizedString.Measure
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: MLEM.Formatting.TokenizedString.Update*
  commentId: Overload:MLEM.Formatting.TokenizedString.Update
  name: Update
  nameWithType: TokenizedString.Update
  fullName: MLEM.Formatting.TokenizedString.Update
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: MLEM.Formatting.TokenizedString.GetTokenUnderPos*
  commentId: Overload:MLEM.Formatting.TokenizedString.GetTokenUnderPos
  name: GetTokenUnderPos
  nameWithType: TokenizedString.GetTokenUnderPos
  fullName: MLEM.Formatting.TokenizedString.GetTokenUnderPos
- uid: MLEM.Formatting.Token
  commentId: T:MLEM.Formatting.Token
  parent: MLEM.Formatting
  name: Token
  nameWithType: Token
  fullName: MLEM.Formatting.Token
- uid: MLEM.Font.GenericFont.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)
  commentId: M:MLEM.Font.GenericFont.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)
  parent: MLEM.Font.GenericFont
  isExternal: true
  name: DrawString(SpriteBatch, String, Vector2, Color, Single, Vector2, Single, SpriteEffects, Single)
  nameWithType: GenericFont.DrawString(SpriteBatch, String, Vector2, Color, Single, Vector2, Single, SpriteEffects, Single)
  fullName: MLEM.Font.GenericFont.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch, System.String, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Color, System.Single, Microsoft.Xna.Framework.Vector2, System.Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single)
  spec.csharp:
  - uid: MLEM.Font.GenericFont.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)
    name: DrawString
    nameWithType: GenericFont.DrawString
    fullName: MLEM.Font.GenericFont.DrawString
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    nameWithType: SpriteEffects
    fullName: Microsoft.Xna.Framework.Graphics.SpriteEffects
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Font.GenericFont.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)
    name: DrawString
    nameWithType: GenericFont.DrawString
    fullName: MLEM.Font.GenericFont.DrawString
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
    name: SpriteBatch
    nameWithType: SpriteBatch
    fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Microsoft.Xna.Framework.Vector2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Xna.Framework.Graphics.SpriteEffects
    name: SpriteEffects
    nameWithType: SpriteEffects
    fullName: Microsoft.Xna.Framework.Graphics.SpriteEffects
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Formatting.TokenizedString.Draw*
  commentId: Overload:MLEM.Formatting.TokenizedString.Draw
  name: Draw
  nameWithType: TokenizedString.Draw
  fullName: MLEM.Formatting.TokenizedString.Draw
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
