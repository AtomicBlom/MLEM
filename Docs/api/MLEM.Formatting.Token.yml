### YamlMime:ManagedReference
items:
- uid: MLEM.Formatting.Token
  commentId: T:MLEM.Formatting.Token
  id: Token
  parent: MLEM.Formatting
  children:
  - MLEM.Formatting.Token.AppliedCodes
  - MLEM.Formatting.Token.DisplayString
  - MLEM.Formatting.Token.DrawCharacter(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Char,System.String,System.Int32,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  - MLEM.Formatting.Token.DrawSelf(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  - MLEM.Formatting.Token.GetArea(Microsoft.Xna.Framework.Vector2,System.Single)
  - MLEM.Formatting.Token.GetColor(Microsoft.Xna.Framework.Color)
  - MLEM.Formatting.Token.GetFont(MLEM.Font.GenericFont)
  - MLEM.Formatting.Token.Index
  - MLEM.Formatting.Token.RawIndex
  - MLEM.Formatting.Token.RawSubstring
  - MLEM.Formatting.Token.Substring
  langs:
  - csharp
  - vb
  name: Token
  nameWithType: Token
  fullName: MLEM.Formatting.Token
  type: Class
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Token
    path: ../MLEM/Formatting/Token.cs
    startLine: 13
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nA part of a <xref href=\"MLEM.Formatting.TokenizedString\" data-throw-if-not-resolved=\"false\"></xref> that has a certain list of formatting codes applied.\n"
  example: []
  syntax:
    content: 'public class Token : GenericDataHolder'
    content.vb: >-
      Public Class Token

          Inherits GenericDataHolder
  inheritance:
  - System.Object
  - MLEM.Misc.GenericDataHolder
  inheritedMembers:
  - MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  - MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  - MLEM.Misc.GenericDataHolder.GetDataKeys
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MLEM.Formatting.Token.AppliedCodes
  commentId: F:MLEM.Formatting.Token.AppliedCodes
  id: AppliedCodes
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: AppliedCodes
  nameWithType: Token.AppliedCodes
  fullName: MLEM.Formatting.Token.AppliedCodes
  type: Field
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: AppliedCodes
    path: ../MLEM/Formatting/Token.cs
    startLine: 18
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe formatting codes that are applied on this token.\n"
  example: []
  syntax:
    content: public readonly Code[] AppliedCodes
    return:
      type: MLEM.Formatting.Codes.Code[]
    content.vb: Public ReadOnly AppliedCodes As Code()
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.Token.Index
  commentId: F:MLEM.Formatting.Token.Index
  id: Index
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: Token.Index
  fullName: MLEM.Formatting.Token.Index
  type: Field
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Index
    path: ../MLEM/Formatting/Token.cs
    startLine: 22
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe index in the <xref href=\"MLEM.Formatting.Token.Substring\" data-throw-if-not-resolved=\"false\"></xref> that this token starts at.\n"
  example: []
  syntax:
    content: public readonly int Index
    return:
      type: System.Int32
    content.vb: Public ReadOnly Index As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.Token.RawIndex
  commentId: F:MLEM.Formatting.Token.RawIndex
  id: RawIndex
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: RawIndex
  nameWithType: Token.RawIndex
  fullName: MLEM.Formatting.Token.RawIndex
  type: Field
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: RawIndex
    path: ../MLEM/Formatting/Token.cs
    startLine: 26
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe index in the <xref href=\"MLEM.Formatting.Token.RawSubstring\" data-throw-if-not-resolved=\"false\"></xref> that this token starts at.\n"
  example: []
  syntax:
    content: public readonly int RawIndex
    return:
      type: System.Int32
    content.vb: Public ReadOnly RawIndex As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.Token.Substring
  commentId: F:MLEM.Formatting.Token.Substring
  id: Substring
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: Substring
  nameWithType: Token.Substring
  fullName: MLEM.Formatting.Token.Substring
  type: Field
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Substring
    path: ../MLEM/Formatting/Token.cs
    startLine: 30
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe substring that this token contains.\n"
  example: []
  syntax:
    content: public readonly string Substring
    return:
      type: System.String
    content.vb: Public ReadOnly Substring As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.Token.DisplayString
  commentId: P:MLEM.Formatting.Token.DisplayString
  id: DisplayString
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: DisplayString
  nameWithType: Token.DisplayString
  fullName: MLEM.Formatting.Token.DisplayString
  type: Property
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: DisplayString
    path: ../MLEM/Formatting/Token.cs
    startLine: 34
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe string that is displayed by this token. If the tokenized string has been split, this string will contain the newline characters.\n"
  example: []
  syntax:
    content: public string DisplayString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayString As String
  overload: MLEM.Formatting.Token.DisplayString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.Token.RawSubstring
  commentId: F:MLEM.Formatting.Token.RawSubstring
  id: RawSubstring
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: RawSubstring
  nameWithType: Token.RawSubstring
  fullName: MLEM.Formatting.Token.RawSubstring
  type: Field
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: RawSubstring
    path: ../MLEM/Formatting/Token.cs
    startLine: 38
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nThe substring that this token contains, without the formatting codes removed.\n"
  example: []
  syntax:
    content: public readonly string RawSubstring
    return:
      type: System.String
    content.vb: Public ReadOnly RawSubstring As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Formatting.Token.GetColor(Microsoft.Xna.Framework.Color)
  commentId: M:MLEM.Formatting.Token.GetColor(Microsoft.Xna.Framework.Color)
  id: GetColor(Microsoft.Xna.Framework.Color)
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: GetColor(Color)
  nameWithType: Token.GetColor(Color)
  fullName: MLEM.Formatting.Token.GetColor(Microsoft.Xna.Framework.Color)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetColor
    path: ../MLEM/Formatting/Token.cs
    startLine: 58
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nGet the color that this token will be rendered with\n"
  example: []
  syntax:
    content: public Color? GetColor(Color defaultPick)
    parameters:
    - id: defaultPick
      type: Microsoft.Xna.Framework.Color
      description: The default color, if none is specified
    return:
      type: System.Nullable{Microsoft.Xna.Framework.Color}
      description: The color to render with
    content.vb: Public Function GetColor(defaultPick As Color) As Color?
  overload: MLEM.Formatting.Token.GetColor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.Token.GetFont(MLEM.Font.GenericFont)
  commentId: M:MLEM.Formatting.Token.GetFont(MLEM.Font.GenericFont)
  id: GetFont(MLEM.Font.GenericFont)
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: GetFont(GenericFont)
  nameWithType: Token.GetFont(GenericFont)
  fullName: MLEM.Formatting.Token.GetFont(MLEM.Font.GenericFont)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetFont
    path: ../MLEM/Formatting/Token.cs
    startLine: 67
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nGet the font that this token will be rendered with\n"
  example: []
  syntax:
    content: public GenericFont GetFont(GenericFont defaultPick)
    parameters:
    - id: defaultPick
      type: MLEM.Font.GenericFont
      description: The default font, if none is specified
    return:
      type: MLEM.Font.GenericFont
      description: The font to render with
    content.vb: Public Function GetFont(defaultPick As GenericFont) As GenericFont
  overload: MLEM.Formatting.Token.GetFont*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.Token.DrawSelf(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  commentId: M:MLEM.Formatting.Token.DrawSelf(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  id: DrawSelf(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: DrawSelf(GameTime, SpriteBatch, Vector2, GenericFont, Color, Single, Single)
  nameWithType: Token.DrawSelf(GameTime, SpriteBatch, Vector2, GenericFont, Color, Single, Single)
  fullName: MLEM.Formatting.Token.DrawSelf(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, Microsoft.Xna.Framework.Vector2, MLEM.Font.GenericFont, Microsoft.Xna.Framework.Color, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: DrawSelf
    path: ../MLEM/Formatting/Token.cs
    startLine: 82
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nDraws the token itself, including all of the <xref href=\"MLEM.Formatting.Codes.Code\" data-throw-if-not-resolved=\"false\"></xref> instances that this token contains.\nNote that, to draw the token&apos;s actual string, <xref href=\"MLEM.Formatting.Token.DrawCharacter(Microsoft.Xna.Framework.GameTime%2cMicrosoft.Xna.Framework.Graphics.SpriteBatch%2cSystem.Char%2cSystem.String%2cSystem.Int32%2cMicrosoft.Xna.Framework.Vector2%2cMLEM.Font.GenericFont%2cMicrosoft.Xna.Framework.Color%2cSystem.Single%2cSystem.Single)\" data-throw-if-not-resolved=\"false\"></xref> is used.\n"
  example: []
  syntax:
    content: public void DrawSelf(GameTime time, SpriteBatch batch, Vector2 pos, GenericFont font, Color color, float scale, float depth)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw the token at
    - id: font
      type: MLEM.Font.GenericFont
      description: The font to use to draw
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color to draw with
    - id: scale
      type: System.Single
      description: The scale to draw at
    - id: depth
      type: System.Single
      description: The depth to draw at
    content.vb: Public Sub DrawSelf(time As GameTime, batch As SpriteBatch, pos As Vector2, font As GenericFont, color As Color, scale As Single, depth As Single)
  overload: MLEM.Formatting.Token.DrawSelf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.Token.DrawCharacter(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Char,System.String,System.Int32,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  commentId: M:MLEM.Formatting.Token.DrawCharacter(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Char,System.String,System.Int32,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  id: DrawCharacter(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Char,System.String,System.Int32,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: DrawCharacter(GameTime, SpriteBatch, Char, String, Int32, Vector2, GenericFont, Color, Single, Single)
  nameWithType: Token.DrawCharacter(GameTime, SpriteBatch, Char, String, Int32, Vector2, GenericFont, Color, Single, Single)
  fullName: MLEM.Formatting.Token.DrawCharacter(Microsoft.Xna.Framework.GameTime, Microsoft.Xna.Framework.Graphics.SpriteBatch, System.Char, System.String, System.Int32, Microsoft.Xna.Framework.Vector2, MLEM.Font.GenericFont, Microsoft.Xna.Framework.Color, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: DrawCharacter
    path: ../MLEM/Formatting/Token.cs
    startLine: 100
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nDraws a given character using this token&apos;s formatting options.\n"
  example: []
  syntax:
    content: public void DrawCharacter(GameTime time, SpriteBatch batch, char c, string cString, int indexInToken, Vector2 pos, GenericFont font, Color color, float scale, float depth)
    parameters:
    - id: time
      type: Microsoft.Xna.Framework.GameTime
      description: The time
    - id: batch
      type: Microsoft.Xna.Framework.Graphics.SpriteBatch
      description: The sprite batch to use
    - id: c
      type: System.Char
      description: The character to draw
    - id: cString
      type: System.String
      description: A single-character string that contains the character to draw
    - id: indexInToken
      type: System.Int32
      description: The index within this token that the character is at
    - id: pos
      type: Microsoft.Xna.Framework.Vector2
      description: The position to draw the token at
    - id: font
      type: MLEM.Font.GenericFont
      description: The font to use to draw
    - id: color
      type: Microsoft.Xna.Framework.Color
      description: The color to draw with
    - id: scale
      type: System.Single
      description: The scale to draw at
    - id: depth
      type: System.Single
      description: The depth to draw at
    content.vb: Public Sub DrawCharacter(time As GameTime, batch As SpriteBatch, c As Char, cString As String, indexInToken As Integer, pos As Vector2, font As GenericFont, color As Color, scale As Single, depth As Single)
  overload: MLEM.Formatting.Token.DrawCharacter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Formatting.Token.GetArea(Microsoft.Xna.Framework.Vector2,System.Single)
  commentId: M:MLEM.Formatting.Token.GetArea(Microsoft.Xna.Framework.Vector2,System.Single)
  id: GetArea(Microsoft.Xna.Framework.Vector2,System.Single)
  parent: MLEM.Formatting.Token
  langs:
  - csharp
  - vb
  name: GetArea(Vector2, Single)
  nameWithType: Token.GetArea(Vector2, Single)
  fullName: MLEM.Formatting.Token.GetArea(Microsoft.Xna.Framework.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: MLEM/Formatting/Token.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetArea
    path: ../MLEM/Formatting/Token.cs
    startLine: 118
  assemblies:
  - MLEM
  namespace: MLEM.Formatting
  summary: "\nGets a list of rectangles that encompass this token&apos;s area.\nNote that more than one rectangle is only returned if the string has been split.\nThis can be used to invoke events when the mouse is hovered over the token, for example.\n"
  example: []
  syntax:
    content: public IEnumerable<RectangleF> GetArea(Vector2 stringPos, float scale)
    parameters:
    - id: stringPos
      type: Microsoft.Xna.Framework.Vector2
      description: The position that the string is drawn at
    - id: scale
      type: System.Single
      description: The scale that the string is drawn at
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Misc.RectangleF}
      description: A set of rectangles that this token contains
    content.vb: Public Function GetArea(stringPos As Vector2, scale As Single) As IEnumerable(Of RectangleF)
  overload: MLEM.Formatting.Token.GetArea*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: MLEM.Formatting.TokenizedString
  commentId: T:MLEM.Formatting.TokenizedString
  parent: MLEM.Formatting
  name: TokenizedString
  nameWithType: TokenizedString
  fullName: MLEM.Formatting.TokenizedString
- uid: MLEM.Formatting
  commentId: N:MLEM.Formatting
  name: MLEM.Formatting
  nameWithType: MLEM.Formatting
  fullName: MLEM.Formatting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MLEM.Misc.GenericDataHolder
  commentId: T:MLEM.Misc.GenericDataHolder
  parent: MLEM.Misc
  name: GenericDataHolder
  nameWithType: GenericDataHolder
  fullName: MLEM.Misc.GenericDataHolder
- uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  commentId: M:MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: SetData(String, Object)
  nameWithType: GenericDataHolder.SetData(String, Object)
  fullName: MLEM.Misc.GenericDataHolder.SetData(System.String, System.Object)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.SetData(System.String,System.Object)
    name: SetData
    nameWithType: GenericDataHolder.SetData
    fullName: MLEM.Misc.GenericDataHolder.SetData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  commentId: M:MLEM.Misc.GenericDataHolder.GetData``1(System.String)
  parent: MLEM.Misc.GenericDataHolder
  isExternal: true
  name: GetData<T>(String)
  nameWithType: GenericDataHolder.GetData<T>(String)
  fullName: MLEM.Misc.GenericDataHolder.GetData<T>(System.String)
  nameWithType.vb: GenericDataHolder.GetData(Of T)(String)
  fullName.vb: MLEM.Misc.GenericDataHolder.GetData(Of T)(System.String)
  name.vb: GetData(Of T)(String)
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData<T>
    nameWithType: GenericDataHolder.GetData<T>
    fullName: MLEM.Misc.GenericDataHolder.GetData<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetData``1(System.String)
    name: GetData(Of T)
    nameWithType: GenericDataHolder.GetData(Of T)
    fullName: MLEM.Misc.GenericDataHolder.GetData(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Misc.GenericDataHolder.GetDataKeys
  commentId: M:MLEM.Misc.GenericDataHolder.GetDataKeys
  parent: MLEM.Misc.GenericDataHolder
  name: GetDataKeys()
  nameWithType: GenericDataHolder.GetDataKeys()
  fullName: MLEM.Misc.GenericDataHolder.GetDataKeys()
  spec.csharp:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MLEM.Misc.GenericDataHolder.GetDataKeys
    name: GetDataKeys
    nameWithType: GenericDataHolder.GetDataKeys
    fullName: MLEM.Misc.GenericDataHolder.GetDataKeys
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: MLEM.Formatting.Codes.Code[]
  isExternal: true
  name: Code[]
  nameWithType: Code[]
  fullName: MLEM.Formatting.Codes.Code[]
  nameWithType.vb: Code()
  fullName.vb: MLEM.Formatting.Codes.Code()
  name.vb: Code()
  spec.csharp:
  - uid: MLEM.Formatting.Codes.Code
    name: Code
    nameWithType: Code
    fullName: MLEM.Formatting.Codes.Code
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Formatting.Codes.Code
    name: Code
    nameWithType: Code
    fullName: MLEM.Formatting.Codes.Code
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Formatting.Token.Substring
  commentId: F:MLEM.Formatting.Token.Substring
  isExternal: true
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MLEM.Formatting.Token.RawSubstring
  commentId: F:MLEM.Formatting.Token.RawSubstring
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MLEM.Formatting.Token.DisplayString*
  commentId: Overload:MLEM.Formatting.Token.DisplayString
  name: DisplayString
  nameWithType: Token.DisplayString
  fullName: MLEM.Formatting.Token.DisplayString
- uid: MLEM.Formatting.Token.GetColor*
  commentId: Overload:MLEM.Formatting.Token.GetColor
  name: GetColor
  nameWithType: Token.GetColor
  fullName: MLEM.Formatting.Token.GetColor
- uid: Microsoft.Xna.Framework.Color
  commentId: T:Microsoft.Xna.Framework.Color
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: Microsoft.Xna.Framework.Color
- uid: System.Nullable{Microsoft.Xna.Framework.Color}
  commentId: T:System.Nullable{Microsoft.Xna.Framework.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Microsoft.Xna.Framework.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Microsoft.Xna.Framework.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Color
    name: Color
    nameWithType: Color
    fullName: Microsoft.Xna.Framework.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Formatting.Token.GetFont*
  commentId: Overload:MLEM.Formatting.Token.GetFont
  name: GetFont
  nameWithType: Token.GetFont
  fullName: MLEM.Formatting.Token.GetFont
- uid: MLEM.Font.GenericFont
  commentId: T:MLEM.Font.GenericFont
  parent: MLEM.Font
  name: GenericFont
  nameWithType: GenericFont
  fullName: MLEM.Font.GenericFont
- uid: MLEM.Font
  commentId: N:MLEM.Font
  name: MLEM.Font
  nameWithType: MLEM.Font
  fullName: MLEM.Font
- uid: MLEM.Formatting.Codes.Code
  commentId: T:MLEM.Formatting.Codes.Code
  parent: MLEM.Formatting.Codes
  name: Code
  nameWithType: Code
  fullName: MLEM.Formatting.Codes.Code
- uid: MLEM.Formatting.Token.DrawCharacter(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Char,System.String,System.Int32,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  commentId: M:MLEM.Formatting.Token.DrawCharacter(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Char,System.String,System.Int32,Microsoft.Xna.Framework.Vector2,MLEM.Font.GenericFont,Microsoft.Xna.Framework.Color,System.Single,System.Single)
  isExternal: true
- uid: MLEM.Formatting.Token.DrawSelf*
  commentId: Overload:MLEM.Formatting.Token.DrawSelf
  name: DrawSelf
  nameWithType: Token.DrawSelf
  fullName: MLEM.Formatting.Token.DrawSelf
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: Microsoft.Xna.Framework.Graphics.SpriteBatch
  commentId: T:Microsoft.Xna.Framework.Graphics.SpriteBatch
  parent: Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: SpriteBatch
  nameWithType: SpriteBatch
  fullName: Microsoft.Xna.Framework.Graphics.SpriteBatch
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Formatting.Codes
  commentId: N:MLEM.Formatting.Codes
  name: MLEM.Formatting.Codes
  nameWithType: MLEM.Formatting.Codes
  fullName: MLEM.Formatting.Codes
- uid: Microsoft.Xna.Framework.Graphics
  commentId: N:Microsoft.Xna.Framework.Graphics
  isExternal: true
  name: Microsoft.Xna.Framework.Graphics
  nameWithType: Microsoft.Xna.Framework.Graphics
  fullName: Microsoft.Xna.Framework.Graphics
- uid: MLEM.Formatting.Token.DrawCharacter*
  commentId: Overload:MLEM.Formatting.Token.DrawCharacter
  name: DrawCharacter
  nameWithType: Token.DrawCharacter
  fullName: MLEM.Formatting.Token.DrawCharacter
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: MLEM.Formatting.Token.GetArea*
  commentId: Overload:MLEM.Formatting.Token.GetArea
  name: GetArea
  nameWithType: Token.GetArea
  fullName: MLEM.Formatting.Token.GetArea
- uid: System.Collections.Generic.IEnumerable{MLEM.Misc.RectangleF}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Misc.RectangleF}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RectangleF>
  nameWithType: IEnumerable<RectangleF>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Misc.RectangleF>
  nameWithType.vb: IEnumerable(Of RectangleF)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Misc.RectangleF)
  name.vb: IEnumerable(Of RectangleF)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: MLEM.Misc.RectangleF
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
