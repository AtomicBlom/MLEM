### YamlMime:ManagedReference
items:
- uid: MLEM.Extended.Tiled.TiledMapCollisions
  commentId: T:MLEM.Extended.Tiled.TiledMapCollisions
  id: TiledMapCollisions
  parent: MLEM.Extended.Tiled
  children:
  - MLEM.Extended.Tiled.TiledMapCollisions.#ctor(MonoGame.Extended.Tiled.TiledMap)
  - MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  - MLEM.Extended.Tiled.TiledMapCollisions.IsColliding(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  - MLEM.Extended.Tiled.TiledMapCollisions.SetMap(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions)
  - MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo(System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: TiledMapCollisions
  nameWithType: TiledMapCollisions
  fullName: MLEM.Extended.Tiled.TiledMapCollisions
  type: Class
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledMapCollisions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: TiledMapCollisions
    path: ../MLEM.Extended/Tiled/TiledMapCollisions.cs
    startLine: 11
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  syntax:
    content: public class TiledMapCollisions
    content.vb: Public Class TiledMapCollisions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MLEM.Extended.Tiled.TiledMapCollisions.#ctor(MonoGame.Extended.Tiled.TiledMap)
  commentId: M:MLEM.Extended.Tiled.TiledMapCollisions.#ctor(MonoGame.Extended.Tiled.TiledMap)
  id: '#ctor(MonoGame.Extended.Tiled.TiledMap)'
  parent: MLEM.Extended.Tiled.TiledMapCollisions
  langs:
  - csharp
  - vb
  name: TiledMapCollisions(TiledMap)
  nameWithType: TiledMapCollisions.TiledMapCollisions(TiledMap)
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.TiledMapCollisions(MonoGame.Extended.Tiled.TiledMap)
  type: Constructor
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledMapCollisions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM.Extended/Tiled/TiledMapCollisions.cs
    startLine: 17
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  syntax:
    content: public TiledMapCollisions(TiledMap map = null)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
    content.vb: Public Sub New(map As TiledMap = Nothing)
  overload: MLEM.Extended.Tiled.TiledMapCollisions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Extended.Tiled.TiledMapCollisions.SetMap(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions)
  commentId: M:MLEM.Extended.Tiled.TiledMapCollisions.SetMap(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions)
  id: SetMap(MonoGame.Extended.Tiled.TiledMap,MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions)
  parent: MLEM.Extended.Tiled.TiledMapCollisions
  langs:
  - csharp
  - vb
  name: SetMap(TiledMap, TiledMapCollisions.CollectCollisions)
  nameWithType: TiledMapCollisions.SetMap(TiledMap, TiledMapCollisions.CollectCollisions)
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.SetMap(MonoGame.Extended.Tiled.TiledMap, MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledMapCollisions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: SetMap
    path: ../MLEM.Extended/Tiled/TiledMapCollisions.cs
    startLine: 22
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  syntax:
    content: public void SetMap(TiledMap map, TiledMapCollisions.CollectCollisions collisionFunction = null)
    parameters:
    - id: map
      type: MonoGame.Extended.Tiled.TiledMap
    - id: collisionFunction
      type: MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions
    content.vb: Public Sub SetMap(map As TiledMap, collisionFunction As TiledMapCollisions.CollectCollisions = Nothing)
  overload: MLEM.Extended.Tiled.TiledMapCollisions.SetMap*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo(System.Int32,System.Int32,System.Int32)
  commentId: M:MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo(System.Int32,System.Int32,System.Int32)
  id: UpdateCollisionInfo(System.Int32,System.Int32,System.Int32)
  parent: MLEM.Extended.Tiled.TiledMapCollisions
  langs:
  - csharp
  - vb
  name: UpdateCollisionInfo(Int32, Int32, Int32)
  nameWithType: TiledMapCollisions.UpdateCollisionInfo(Int32, Int32, Int32)
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledMapCollisions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: UpdateCollisionInfo
    path: ../MLEM.Extended/Tiled/TiledMapCollisions.cs
    startLine: 46
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  syntax:
    content: public void UpdateCollisionInfo(int layerIndex, int x, int y)
    parameters:
    - id: layerIndex
      type: System.Int32
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    content.vb: Public Sub UpdateCollisionInfo(layerIndex As Integer, x As Integer, y As Integer)
  overload: MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  commentId: M:MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  id: GetCollidingTiles(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  parent: MLEM.Extended.Tiled.TiledMapCollisions
  langs:
  - csharp
  - vb
  name: GetCollidingTiles(RectangleF, Func<TiledMapCollisions.TileCollisionInfo, Boolean>)
  nameWithType: TiledMapCollisions.GetCollidingTiles(RectangleF, Func<TiledMapCollisions.TileCollisionInfo, Boolean>)
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles(MonoGame.Extended.RectangleF, System.Func<MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo, System.Boolean>)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledMapCollisions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetCollidingTiles
    path: ../MLEM.Extended/Tiled/TiledMapCollisions.cs
    startLine: 57
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  syntax:
    content: public IEnumerable<TiledMapCollisions.TileCollisionInfo> GetCollidingTiles(RectangleF area, Func<TiledMapCollisions.TileCollisionInfo, bool> included = null)
    parameters:
    - id: area
      type: MonoGame.Extended.RectangleF
    - id: included
      type: System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean}
    return:
      type: System.Collections.Generic.IEnumerable{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo}
    content.vb: Public Function GetCollidingTiles(area As RectangleF, included As Func(Of TiledMapCollisions.TileCollisionInfo, Boolean) = Nothing) As IEnumerable(Of TiledMapCollisions.TileCollisionInfo)
  overload: MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles*
  nameWithType.vb: TiledMapCollisions.GetCollidingTiles(RectangleF, Func(Of TiledMapCollisions.TileCollisionInfo, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles(MonoGame.Extended.RectangleF, System.Func(Of MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo, System.Boolean))
  name.vb: GetCollidingTiles(RectangleF, Func(Of TiledMapCollisions.TileCollisionInfo, Boolean))
- uid: MLEM.Extended.Tiled.TiledMapCollisions.IsColliding(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  commentId: M:MLEM.Extended.Tiled.TiledMapCollisions.IsColliding(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  id: IsColliding(MonoGame.Extended.RectangleF,System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean})
  parent: MLEM.Extended.Tiled.TiledMapCollisions
  langs:
  - csharp
  - vb
  name: IsColliding(RectangleF, Func<TiledMapCollisions.TileCollisionInfo, Boolean>)
  nameWithType: TiledMapCollisions.IsColliding(RectangleF, Func<TiledMapCollisions.TileCollisionInfo, Boolean>)
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.IsColliding(MonoGame.Extended.RectangleF, System.Func<MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo, System.Boolean>)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Tiled/TiledMapCollisions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsColliding
    path: ../MLEM.Extended/Tiled/TiledMapCollisions.cs
    startLine: 76
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Tiled
  syntax:
    content: public bool IsColliding(RectangleF area, Func<TiledMapCollisions.TileCollisionInfo, bool> included = null)
    parameters:
    - id: area
      type: MonoGame.Extended.RectangleF
    - id: included
      type: System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean}
    return:
      type: System.Boolean
    content.vb: Public Function IsColliding(area As RectangleF, included As Func(Of TiledMapCollisions.TileCollisionInfo, Boolean) = Nothing) As Boolean
  overload: MLEM.Extended.Tiled.TiledMapCollisions.IsColliding*
  nameWithType.vb: TiledMapCollisions.IsColliding(RectangleF, Func(Of TiledMapCollisions.TileCollisionInfo, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Extended.Tiled.TiledMapCollisions.IsColliding(MonoGame.Extended.RectangleF, System.Func(Of MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo, System.Boolean))
  name.vb: IsColliding(RectangleF, Func(Of TiledMapCollisions.TileCollisionInfo, Boolean))
references:
- uid: MLEM.Extended.Tiled
  commentId: N:MLEM.Extended.Tiled
  name: MLEM.Extended.Tiled
  nameWithType: MLEM.Extended.Tiled
  fullName: MLEM.Extended.Tiled
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Extended.Tiled.TiledMapCollisions.#ctor*
  commentId: Overload:MLEM.Extended.Tiled.TiledMapCollisions.#ctor
  name: TiledMapCollisions
  nameWithType: TiledMapCollisions.TiledMapCollisions
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.TiledMapCollisions
- uid: MonoGame.Extended.Tiled.TiledMap
  commentId: T:MonoGame.Extended.Tiled.TiledMap
  parent: MonoGame.Extended.Tiled
  isExternal: true
  name: TiledMap
  nameWithType: TiledMap
  fullName: MonoGame.Extended.Tiled.TiledMap
- uid: MonoGame.Extended.Tiled
  commentId: N:MonoGame.Extended.Tiled
  isExternal: true
  name: MonoGame.Extended.Tiled
  nameWithType: MonoGame.Extended.Tiled
  fullName: MonoGame.Extended.Tiled
- uid: MLEM.Extended.Tiled.TiledMapCollisions.SetMap*
  commentId: Overload:MLEM.Extended.Tiled.TiledMapCollisions.SetMap
  name: SetMap
  nameWithType: TiledMapCollisions.SetMap
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.SetMap
- uid: MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions
  commentId: T:MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions
  parent: MLEM.Extended.Tiled
  name: TiledMapCollisions.CollectCollisions
  nameWithType: TiledMapCollisions.CollectCollisions
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.CollectCollisions
- uid: MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo*
  commentId: Overload:MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo
  name: UpdateCollisionInfo
  nameWithType: TiledMapCollisions.UpdateCollisionInfo
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.UpdateCollisionInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles*
  commentId: Overload:MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles
  name: GetCollidingTiles
  nameWithType: TiledMapCollisions.GetCollidingTiles
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.GetCollidingTiles
- uid: MonoGame.Extended.RectangleF
  commentId: T:MonoGame.Extended.RectangleF
  parent: MonoGame.Extended
  isExternal: true
  name: RectangleF
  nameWithType: RectangleF
  fullName: MonoGame.Extended.RectangleF
- uid: System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean}
  commentId: T:System.Func{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TiledMapCollisions.TileCollisionInfo, Boolean>
  nameWithType: Func<TiledMapCollisions.TileCollisionInfo, Boolean>
  fullName: System.Func<MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo, System.Boolean>
  nameWithType.vb: Func(Of TiledMapCollisions.TileCollisionInfo, Boolean)
  fullName.vb: System.Func(Of MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo, System.Boolean)
  name.vb: Func(Of TiledMapCollisions.TileCollisionInfo, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
    name: TiledMapCollisions.TileCollisionInfo
    nameWithType: TiledMapCollisions.TileCollisionInfo
    fullName: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
    name: TiledMapCollisions.TileCollisionInfo
    nameWithType: TiledMapCollisions.TileCollisionInfo
    fullName: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TiledMapCollisions.TileCollisionInfo>
  nameWithType: IEnumerable<TiledMapCollisions.TileCollisionInfo>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo>
  nameWithType.vb: IEnumerable(Of TiledMapCollisions.TileCollisionInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo)
  name.vb: IEnumerable(Of TiledMapCollisions.TileCollisionInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
    name: TiledMapCollisions.TileCollisionInfo
    nameWithType: TiledMapCollisions.TileCollisionInfo
    fullName: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
    name: TiledMapCollisions.TileCollisionInfo
    nameWithType: TiledMapCollisions.TileCollisionInfo
    fullName: MLEM.Extended.Tiled.TiledMapCollisions.TileCollisionInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: MonoGame.Extended
  commentId: N:MonoGame.Extended
  isExternal: true
  name: MonoGame.Extended
  nameWithType: MonoGame.Extended
  fullName: MonoGame.Extended
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: MLEM.Extended.Tiled.TiledMapCollisions.IsColliding*
  commentId: Overload:MLEM.Extended.Tiled.TiledMapCollisions.IsColliding
  name: IsColliding
  nameWithType: TiledMapCollisions.IsColliding
  fullName: MLEM.Extended.Tiled.TiledMapCollisions.IsColliding
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
