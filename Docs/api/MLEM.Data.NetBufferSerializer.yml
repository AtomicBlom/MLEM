### YamlMime:ManagedReference
items:
- uid: MLEM.Data.NetBufferSerializer
  commentId: T:MLEM.Data.NetBufferSerializer
  id: NetBufferSerializer
  parent: MLEM.Data
  children:
  - MLEM.Data.NetBufferSerializer.#ctor
  - MLEM.Data.NetBufferSerializer.AddHandler``1(Newtonsoft.Json.JsonSerializer)
  - MLEM.Data.NetBufferSerializer.AddHandler``1(System.Action{Lidgren.Network.NetBuffer,``0},System.Func{Lidgren.Network.NetBuffer,``0})
  - MLEM.Data.NetBufferSerializer.Deserialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  - MLEM.Data.NetBufferSerializer.Serialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  langs:
  - csharp
  - vb
  name: NetBufferSerializer
  nameWithType: NetBufferSerializer
  fullName: MLEM.Data.NetBufferSerializer
  type: Class
  source:
    remote:
      path: MLEM.Data/NetBufferSerializer.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: NetBufferSerializer
    path: ../MLEM.Data/NetBufferSerializer.cs
    startLine: 7
  assemblies:
  - MLEM.Data
  namespace: MLEM.Data
  syntax:
    content: public class NetBufferSerializer
    content.vb: Public Class NetBufferSerializer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MLEM.Data.NetBufferSerializer.#ctor
  commentId: M:MLEM.Data.NetBufferSerializer.#ctor
  id: '#ctor'
  parent: MLEM.Data.NetBufferSerializer
  langs:
  - csharp
  - vb
  name: NetBufferSerializer()
  nameWithType: NetBufferSerializer.NetBufferSerializer()
  fullName: MLEM.Data.NetBufferSerializer.NetBufferSerializer()
  type: Constructor
  source:
    remote:
      path: MLEM.Data/NetBufferSerializer.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM.Data/NetBufferSerializer.cs
    startLine: 13
  assemblies:
  - MLEM.Data
  namespace: MLEM.Data
  syntax:
    content: public NetBufferSerializer()
    content.vb: Public Sub New
  overload: MLEM.Data.NetBufferSerializer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Data.NetBufferSerializer.Serialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  commentId: M:MLEM.Data.NetBufferSerializer.Serialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  id: Serialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  parent: MLEM.Data.NetBufferSerializer
  langs:
  - csharp
  - vb
  name: Serialize(NetBuffer, Object, BindingFlags)
  nameWithType: NetBufferSerializer.Serialize(NetBuffer, Object, BindingFlags)
  fullName: MLEM.Data.NetBufferSerializer.Serialize(Lidgren.Network.NetBuffer, System.Object, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: MLEM.Data/NetBufferSerializer.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Serialize
    path: ../MLEM.Data/NetBufferSerializer.cs
    startLine: 30
  assemblies:
  - MLEM.Data
  namespace: MLEM.Data
  syntax:
    content: public void Serialize(NetBuffer buffer, object o, BindingFlags flags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
    parameters:
    - id: buffer
      type: Lidgren.Network.NetBuffer
    - id: o
      type: System.Object
    - id: flags
      type: System.Reflection.BindingFlags
    content.vb: Public Sub Serialize(buffer As NetBuffer, o As Object, flags As BindingFlags = BindingFlags.Instance Or BindingFlags.NonPublic Or BindingFlags.Public)
  overload: MLEM.Data.NetBufferSerializer.Serialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Data.NetBufferSerializer.Deserialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  commentId: M:MLEM.Data.NetBufferSerializer.Deserialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  id: Deserialize(Lidgren.Network.NetBuffer,System.Object,System.Reflection.BindingFlags)
  parent: MLEM.Data.NetBufferSerializer
  langs:
  - csharp
  - vb
  name: Deserialize(NetBuffer, Object, BindingFlags)
  nameWithType: NetBufferSerializer.Deserialize(NetBuffer, Object, BindingFlags)
  fullName: MLEM.Data.NetBufferSerializer.Deserialize(Lidgren.Network.NetBuffer, System.Object, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: MLEM.Data/NetBufferSerializer.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Deserialize
    path: ../MLEM.Data/NetBufferSerializer.cs
    startLine: 38
  assemblies:
  - MLEM.Data
  namespace: MLEM.Data
  syntax:
    content: public void Deserialize(NetBuffer buffer, object o, BindingFlags flags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
    parameters:
    - id: buffer
      type: Lidgren.Network.NetBuffer
    - id: o
      type: System.Object
    - id: flags
      type: System.Reflection.BindingFlags
    content.vb: Public Sub Deserialize(buffer As NetBuffer, o As Object, flags As BindingFlags = BindingFlags.Instance Or BindingFlags.NonPublic Or BindingFlags.Public)
  overload: MLEM.Data.NetBufferSerializer.Deserialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Data.NetBufferSerializer.AddHandler``1(System.Action{Lidgren.Network.NetBuffer,``0},System.Func{Lidgren.Network.NetBuffer,``0})
  commentId: M:MLEM.Data.NetBufferSerializer.AddHandler``1(System.Action{Lidgren.Network.NetBuffer,``0},System.Func{Lidgren.Network.NetBuffer,``0})
  id: AddHandler``1(System.Action{Lidgren.Network.NetBuffer,``0},System.Func{Lidgren.Network.NetBuffer,``0})
  parent: MLEM.Data.NetBufferSerializer
  langs:
  - csharp
  - vb
  name: AddHandler<T>(Action<NetBuffer, T>, Func<NetBuffer, T>)
  nameWithType: NetBufferSerializer.AddHandler<T>(Action<NetBuffer, T>, Func<NetBuffer, T>)
  fullName: MLEM.Data.NetBufferSerializer.AddHandler<T>(System.Action<Lidgren.Network.NetBuffer, T>, System.Func<Lidgren.Network.NetBuffer, T>)
  type: Method
  source:
    remote:
      path: MLEM.Data/NetBufferSerializer.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: AddHandler
    path: ../MLEM.Data/NetBufferSerializer.cs
    startLine: 55
  assemblies:
  - MLEM.Data
  namespace: MLEM.Data
  syntax:
    content: public void AddHandler<T>(Action<NetBuffer, T> write, Func<NetBuffer, T> read)
    parameters:
    - id: write
      type: System.Action{Lidgren.Network.NetBuffer,{T}}
    - id: read
      type: System.Func{Lidgren.Network.NetBuffer,{T}}
    typeParameters:
    - id: T
    content.vb: Public Sub AddHandler(Of T)(write As Action(Of NetBuffer, T), read As Func(Of NetBuffer, T))
  overload: MLEM.Data.NetBufferSerializer.AddHandler*
  nameWithType.vb: NetBufferSerializer.AddHandler(Of T)(Action(Of NetBuffer, T), Func(Of NetBuffer, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Data.NetBufferSerializer.AddHandler(Of T)(System.Action(Of Lidgren.Network.NetBuffer, T), System.Func(Of Lidgren.Network.NetBuffer, T))
  name.vb: AddHandler(Of T)(Action(Of NetBuffer, T), Func(Of NetBuffer, T))
- uid: MLEM.Data.NetBufferSerializer.AddHandler``1(Newtonsoft.Json.JsonSerializer)
  commentId: M:MLEM.Data.NetBufferSerializer.AddHandler``1(Newtonsoft.Json.JsonSerializer)
  id: AddHandler``1(Newtonsoft.Json.JsonSerializer)
  parent: MLEM.Data.NetBufferSerializer
  langs:
  - csharp
  - vb
  name: AddHandler<T>(JsonSerializer)
  nameWithType: NetBufferSerializer.AddHandler<T>(JsonSerializer)
  fullName: MLEM.Data.NetBufferSerializer.AddHandler<T>(Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: MLEM.Data/NetBufferSerializer.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: AddHandler
    path: ../MLEM.Data/NetBufferSerializer.cs
    startLine: 60
  assemblies:
  - MLEM.Data
  namespace: MLEM.Data
  syntax:
    content: public void AddHandler<T>(JsonSerializer serializer)
    parameters:
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
    typeParameters:
    - id: T
    content.vb: Public Sub AddHandler(Of T)(serializer As JsonSerializer)
  overload: MLEM.Data.NetBufferSerializer.AddHandler*
  nameWithType.vb: NetBufferSerializer.AddHandler(Of T)(JsonSerializer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Data.NetBufferSerializer.AddHandler(Of T)(Newtonsoft.Json.JsonSerializer)
  name.vb: AddHandler(Of T)(JsonSerializer)
references:
- uid: MLEM.Data
  commentId: N:MLEM.Data
  name: MLEM.Data
  nameWithType: MLEM.Data
  fullName: MLEM.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Data.NetBufferSerializer.#ctor*
  commentId: Overload:MLEM.Data.NetBufferSerializer.#ctor
  name: NetBufferSerializer
  nameWithType: NetBufferSerializer.NetBufferSerializer
  fullName: MLEM.Data.NetBufferSerializer.NetBufferSerializer
- uid: MLEM.Data.NetBufferSerializer.Serialize*
  commentId: Overload:MLEM.Data.NetBufferSerializer.Serialize
  name: Serialize
  nameWithType: NetBufferSerializer.Serialize
  fullName: MLEM.Data.NetBufferSerializer.Serialize
- uid: Lidgren.Network.NetBuffer
  commentId: T:Lidgren.Network.NetBuffer
  parent: Lidgren.Network
  isExternal: true
  name: NetBuffer
  nameWithType: NetBuffer
  fullName: Lidgren.Network.NetBuffer
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: true
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: Lidgren.Network
  commentId: N:Lidgren.Network
  isExternal: true
  name: Lidgren.Network
  nameWithType: Lidgren.Network
  fullName: Lidgren.Network
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: MLEM.Data.NetBufferSerializer.Deserialize*
  commentId: Overload:MLEM.Data.NetBufferSerializer.Deserialize
  name: Deserialize
  nameWithType: NetBufferSerializer.Deserialize
  fullName: MLEM.Data.NetBufferSerializer.Deserialize
- uid: MLEM.Data.NetBufferSerializer.AddHandler*
  commentId: Overload:MLEM.Data.NetBufferSerializer.AddHandler
  name: AddHandler
  nameWithType: NetBufferSerializer.AddHandler
  fullName: MLEM.Data.NetBufferSerializer.AddHandler
- uid: System.Action{Lidgren.Network.NetBuffer,{T}}
  commentId: T:System.Action{Lidgren.Network.NetBuffer,``0}
  parent: System
  definition: System.Action`2
  name: Action<NetBuffer, T>
  nameWithType: Action<NetBuffer, T>
  fullName: System.Action<Lidgren.Network.NetBuffer, T>
  nameWithType.vb: Action(Of NetBuffer, T)
  fullName.vb: System.Action(Of Lidgren.Network.NetBuffer, T)
  name.vb: Action(Of NetBuffer, T)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Lidgren.Network.NetBuffer
    name: NetBuffer
    nameWithType: NetBuffer
    fullName: Lidgren.Network.NetBuffer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Lidgren.Network.NetBuffer
    name: NetBuffer
    nameWithType: NetBuffer
    fullName: Lidgren.Network.NetBuffer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Lidgren.Network.NetBuffer,{T}}
  commentId: T:System.Func{Lidgren.Network.NetBuffer,``0}
  parent: System
  definition: System.Func`2
  name: Func<NetBuffer, T>
  nameWithType: Func<NetBuffer, T>
  fullName: System.Func<Lidgren.Network.NetBuffer, T>
  nameWithType.vb: Func(Of NetBuffer, T)
  fullName.vb: System.Func(Of Lidgren.Network.NetBuffer, T)
  name.vb: Func(Of NetBuffer, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Lidgren.Network.NetBuffer
    name: NetBuffer
    nameWithType: NetBuffer
    fullName: Lidgren.Network.NetBuffer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Lidgren.Network.NetBuffer
    name: NetBuffer
    nameWithType: NetBuffer
    fullName: Lidgren.Network.NetBuffer
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
