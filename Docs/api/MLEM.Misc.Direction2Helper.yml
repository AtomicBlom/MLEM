### YamlMime:ManagedReference
items:
- uid: MLEM.Misc.Direction2Helper
  commentId: T:MLEM.Misc.Direction2Helper
  id: Direction2Helper
  parent: MLEM.Misc
  children:
  - MLEM.Misc.Direction2Helper.Adjacent
  - MLEM.Misc.Direction2Helper.All
  - MLEM.Misc.Direction2Helper.AllExceptNone
  - MLEM.Misc.Direction2Helper.Angle(MLEM.Misc.Direction2)
  - MLEM.Misc.Direction2Helper.Diagonals
  - MLEM.Misc.Direction2Helper.IsAdjacent(MLEM.Misc.Direction2)
  - MLEM.Misc.Direction2Helper.IsDiagonal(MLEM.Misc.Direction2)
  - MLEM.Misc.Direction2Helper.Offset(MLEM.Misc.Direction2)
  - MLEM.Misc.Direction2Helper.Offsets(System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2})
  - MLEM.Misc.Direction2Helper.Opposite(MLEM.Misc.Direction2)
  - MLEM.Misc.Direction2Helper.RotateCcw(MLEM.Misc.Direction2,System.Boolean)
  - MLEM.Misc.Direction2Helper.RotateCw(MLEM.Misc.Direction2,System.Boolean)
  langs:
  - csharp
  - vb
  name: Direction2Helper
  nameWithType: Direction2Helper
  fullName: MLEM.Misc.Direction2Helper
  type: Class
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Direction2Helper
    path: ../MLEM/Misc/Direction2.cs
    startLine: 23
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static class Direction2Helper
    content.vb: Public Module Direction2Helper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MLEM.Misc.Direction2Helper.All
  commentId: F:MLEM.Misc.Direction2Helper.All
  id: All
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: All
  nameWithType: Direction2Helper.All
  fullName: MLEM.Misc.Direction2Helper.All
  type: Field
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: All
    path: ../MLEM/Misc/Direction2.cs
    startLine: 25
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static readonly Direction2[] All
    return:
      type: MLEM.Misc.Direction2[]
    content.vb: Public Shared ReadOnly All As Direction2()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MLEM.Misc.Direction2Helper.Adjacent
  commentId: F:MLEM.Misc.Direction2Helper.Adjacent
  id: Adjacent
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: Adjacent
  nameWithType: Direction2Helper.Adjacent
  fullName: MLEM.Misc.Direction2Helper.Adjacent
  type: Field
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Adjacent
    path: ../MLEM/Misc/Direction2.cs
    startLine: 26
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static readonly Direction2[] Adjacent
    return:
      type: MLEM.Misc.Direction2[]
    content.vb: Public Shared ReadOnly Adjacent As Direction2()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MLEM.Misc.Direction2Helper.Diagonals
  commentId: F:MLEM.Misc.Direction2Helper.Diagonals
  id: Diagonals
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: Diagonals
  nameWithType: Direction2Helper.Diagonals
  fullName: MLEM.Misc.Direction2Helper.Diagonals
  type: Field
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Diagonals
    path: ../MLEM/Misc/Direction2.cs
    startLine: 27
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static readonly Direction2[] Diagonals
    return:
      type: MLEM.Misc.Direction2[]
    content.vb: Public Shared ReadOnly Diagonals As Direction2()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MLEM.Misc.Direction2Helper.AllExceptNone
  commentId: F:MLEM.Misc.Direction2Helper.AllExceptNone
  id: AllExceptNone
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: AllExceptNone
  nameWithType: Direction2Helper.AllExceptNone
  fullName: MLEM.Misc.Direction2Helper.AllExceptNone
  type: Field
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: AllExceptNone
    path: ../MLEM/Misc/Direction2.cs
    startLine: 28
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static readonly Direction2[] AllExceptNone
    return:
      type: MLEM.Misc.Direction2[]
    content.vb: Public Shared ReadOnly AllExceptNone As Direction2()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: MLEM.Misc.Direction2Helper.IsAdjacent(MLEM.Misc.Direction2)
  commentId: M:MLEM.Misc.Direction2Helper.IsAdjacent(MLEM.Misc.Direction2)
  id: IsAdjacent(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: IsAdjacent(Direction2)
  nameWithType: Direction2Helper.IsAdjacent(Direction2)
  fullName: MLEM.Misc.Direction2Helper.IsAdjacent(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsAdjacent
    path: ../MLEM/Misc/Direction2.cs
    startLine: 30
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static bool IsAdjacent(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAdjacent(dir As Direction2) As Boolean
  overload: MLEM.Misc.Direction2Helper.IsAdjacent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Misc.Direction2Helper.IsDiagonal(MLEM.Misc.Direction2)
  commentId: M:MLEM.Misc.Direction2Helper.IsDiagonal(MLEM.Misc.Direction2)
  id: IsDiagonal(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: IsDiagonal(Direction2)
  nameWithType: Direction2Helper.IsDiagonal(Direction2)
  fullName: MLEM.Misc.Direction2Helper.IsDiagonal(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsDiagonal
    path: ../MLEM/Misc/Direction2.cs
    startLine: 34
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static bool IsDiagonal(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDiagonal(dir As Direction2) As Boolean
  overload: MLEM.Misc.Direction2Helper.IsDiagonal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Misc.Direction2Helper.Offset(MLEM.Misc.Direction2)
  commentId: M:MLEM.Misc.Direction2Helper.Offset(MLEM.Misc.Direction2)
  id: Offset(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: Offset(Direction2)
  nameWithType: Direction2Helper.Offset(Direction2)
  fullName: MLEM.Misc.Direction2Helper.Offset(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Offset
    path: ../MLEM/Misc/Direction2.cs
    startLine: 38
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static Point Offset(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Offset(dir As Direction2) As Point
  overload: MLEM.Misc.Direction2Helper.Offset*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Misc.Direction2Helper.Offsets(System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2})
  commentId: M:MLEM.Misc.Direction2Helper.Offsets(System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2})
  id: Offsets(System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2})
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: Offsets(IEnumerable<Direction2>)
  nameWithType: Direction2Helper.Offsets(IEnumerable<Direction2>)
  fullName: MLEM.Misc.Direction2Helper.Offsets(System.Collections.Generic.IEnumerable<MLEM.Misc.Direction2>)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Offsets
    path: ../MLEM/Misc/Direction2.cs
    startLine: 61
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static IEnumerable<Point> Offsets(this IEnumerable<Direction2> directions)
    parameters:
    - id: directions
      type: System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Offsets(directions As IEnumerable(Of Direction2)) As IEnumerable(Of Point)
  overload: MLEM.Misc.Direction2Helper.Offsets*
  nameWithType.vb: Direction2Helper.Offsets(IEnumerable(Of Direction2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MLEM.Misc.Direction2Helper.Offsets(System.Collections.Generic.IEnumerable(Of MLEM.Misc.Direction2))
  name.vb: Offsets(IEnumerable(Of Direction2))
- uid: MLEM.Misc.Direction2Helper.Opposite(MLEM.Misc.Direction2)
  commentId: M:MLEM.Misc.Direction2Helper.Opposite(MLEM.Misc.Direction2)
  id: Opposite(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: Opposite(Direction2)
  nameWithType: Direction2Helper.Opposite(Direction2)
  fullName: MLEM.Misc.Direction2Helper.Opposite(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Opposite
    path: ../MLEM/Misc/Direction2.cs
    startLine: 66
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static Direction2 Opposite(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
    return:
      type: MLEM.Misc.Direction2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Opposite(dir As Direction2) As Direction2
  overload: MLEM.Misc.Direction2Helper.Opposite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Misc.Direction2Helper.Angle(MLEM.Misc.Direction2)
  commentId: M:MLEM.Misc.Direction2Helper.Angle(MLEM.Misc.Direction2)
  id: Angle(MLEM.Misc.Direction2)
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: Angle(Direction2)
  nameWithType: Direction2Helper.Angle(Direction2)
  fullName: MLEM.Misc.Direction2Helper.Angle(MLEM.Misc.Direction2)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Angle
    path: ../MLEM/Misc/Direction2.cs
    startLine: 89
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static float Angle(this Direction2 dir)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Angle(dir As Direction2) As Single
  overload: MLEM.Misc.Direction2Helper.Angle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Misc.Direction2Helper.RotateCw(MLEM.Misc.Direction2,System.Boolean)
  commentId: M:MLEM.Misc.Direction2Helper.RotateCw(MLEM.Misc.Direction2,System.Boolean)
  id: RotateCw(MLEM.Misc.Direction2,System.Boolean)
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: RotateCw(Direction2, Boolean)
  nameWithType: Direction2Helper.RotateCw(Direction2, Boolean)
  fullName: MLEM.Misc.Direction2Helper.RotateCw(MLEM.Misc.Direction2, System.Boolean)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: RotateCw
    path: ../MLEM/Misc/Direction2.cs
    startLine: 94
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static Direction2 RotateCw(this Direction2 dir, bool fortyFiveDegrees = false)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
    - id: fortyFiveDegrees
      type: System.Boolean
    return:
      type: MLEM.Misc.Direction2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RotateCw(dir As Direction2, fortyFiveDegrees As Boolean = False) As Direction2
  overload: MLEM.Misc.Direction2Helper.RotateCw*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MLEM.Misc.Direction2Helper.RotateCcw(MLEM.Misc.Direction2,System.Boolean)
  commentId: M:MLEM.Misc.Direction2Helper.RotateCcw(MLEM.Misc.Direction2,System.Boolean)
  id: RotateCcw(MLEM.Misc.Direction2,System.Boolean)
  isExtensionMethod: true
  parent: MLEM.Misc.Direction2Helper
  langs:
  - csharp
  - vb
  name: RotateCcw(Direction2, Boolean)
  nameWithType: Direction2Helper.RotateCcw(Direction2, Boolean)
  fullName: MLEM.Misc.Direction2Helper.RotateCcw(MLEM.Misc.Direction2, System.Boolean)
  type: Method
  source:
    remote:
      path: MLEM/Misc/Direction2.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: RotateCcw
    path: ../MLEM/Misc/Direction2.cs
    startLine: 117
  assemblies:
  - MLEM
  namespace: MLEM.Misc
  syntax:
    content: public static Direction2 RotateCcw(this Direction2 dir, bool fortyFiveDegrees = false)
    parameters:
    - id: dir
      type: MLEM.Misc.Direction2
    - id: fortyFiveDegrees
      type: System.Boolean
    return:
      type: MLEM.Misc.Direction2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RotateCcw(dir As Direction2, fortyFiveDegrees As Boolean = False) As Direction2
  overload: MLEM.Misc.Direction2Helper.RotateCcw*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: MLEM.Misc
  commentId: N:MLEM.Misc
  name: MLEM.Misc
  nameWithType: MLEM.Misc
  fullName: MLEM.Misc
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Misc.Direction2[]
  isExternal: true
  name: Direction2[]
  nameWithType: Direction2[]
  fullName: MLEM.Misc.Direction2[]
  nameWithType.vb: Direction2()
  fullName.vb: MLEM.Misc.Direction2()
  name.vb: Direction2()
  spec.csharp:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Misc.Direction2Helper.IsAdjacent*
  commentId: Overload:MLEM.Misc.Direction2Helper.IsAdjacent
  name: IsAdjacent
  nameWithType: Direction2Helper.IsAdjacent
  fullName: MLEM.Misc.Direction2Helper.IsAdjacent
- uid: MLEM.Misc.Direction2
  commentId: T:MLEM.Misc.Direction2
  parent: MLEM.Misc
  name: Direction2
  nameWithType: Direction2
  fullName: MLEM.Misc.Direction2
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MLEM.Misc.Direction2Helper.IsDiagonal*
  commentId: Overload:MLEM.Misc.Direction2Helper.IsDiagonal
  name: IsDiagonal
  nameWithType: Direction2Helper.IsDiagonal
  fullName: MLEM.Misc.Direction2Helper.IsDiagonal
- uid: MLEM.Misc.Direction2Helper.Offset*
  commentId: Overload:MLEM.Misc.Direction2Helper.Offset
  name: Offset
  nameWithType: Direction2Helper.Offset
  fullName: MLEM.Misc.Direction2Helper.Offset
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: MLEM.Misc.Direction2Helper.Offsets*
  commentId: Overload:MLEM.Misc.Direction2Helper.Offsets
  name: Offsets
  nameWithType: Direction2Helper.Offsets
  fullName: MLEM.Misc.Direction2Helper.Offsets
- uid: System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
  commentId: T:System.Collections.Generic.IEnumerable{MLEM.Misc.Direction2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Direction2>
  nameWithType: IEnumerable<Direction2>
  fullName: System.Collections.Generic.IEnumerable<MLEM.Misc.Direction2>
  nameWithType.vb: IEnumerable(Of Direction2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of MLEM.Misc.Direction2)
  name.vb: IEnumerable(Of Direction2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MLEM.Misc.Direction2
    name: Direction2
    nameWithType: Direction2
    fullName: MLEM.Misc.Direction2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Point}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Point>
  nameWithType: IEnumerable<Point>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Xna.Framework.Point>
  nameWithType.vb: IEnumerable(Of Point)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Xna.Framework.Point)
  name.vb: IEnumerable(Of Point)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Point
    name: Point
    nameWithType: Point
    fullName: Microsoft.Xna.Framework.Point
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: MLEM.Misc.Direction2Helper.Opposite*
  commentId: Overload:MLEM.Misc.Direction2Helper.Opposite
  name: Opposite
  nameWithType: Direction2Helper.Opposite
  fullName: MLEM.Misc.Direction2Helper.Opposite
- uid: MLEM.Misc.Direction2Helper.Angle*
  commentId: Overload:MLEM.Misc.Direction2Helper.Angle
  name: Angle
  nameWithType: Direction2Helper.Angle
  fullName: MLEM.Misc.Direction2Helper.Angle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Misc.Direction2Helper.RotateCw*
  commentId: Overload:MLEM.Misc.Direction2Helper.RotateCw
  name: RotateCw
  nameWithType: Direction2Helper.RotateCw
  fullName: MLEM.Misc.Direction2Helper.RotateCw
- uid: MLEM.Misc.Direction2Helper.RotateCcw*
  commentId: Overload:MLEM.Misc.Direction2Helper.RotateCcw
  name: RotateCcw
  nameWithType: Direction2Helper.RotateCcw
  fullName: MLEM.Misc.Direction2Helper.RotateCcw
