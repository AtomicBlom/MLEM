### YamlMime:ManagedReference
items:
- uid: MLEM.Input.InputHandler
  commentId: T:MLEM.Input.InputHandler
  id: InputHandler
  parent: MLEM.Input
  children:
  - MLEM.Input.InputHandler.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - MLEM.Input.InputHandler.ConnectedGamepads
  - MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  - MLEM.Input.InputHandler.Gestures
  - MLEM.Input.InputHandler.GetGamepadState(System.Int32)
  - MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  - MLEM.Input.InputHandler.GetLastGamepadState(System.Int32)
  - MLEM.Input.InputHandler.HandleGamepadRepeats
  - MLEM.Input.InputHandler.HandleGamepads
  - MLEM.Input.InputHandler.HandleKeyboard
  - MLEM.Input.InputHandler.HandleKeyboardRepeats
  - MLEM.Input.InputHandler.HandleMouse
  - MLEM.Input.InputHandler.HandleTouch
  - MLEM.Input.InputHandler.IsAnyDown(System.Object[])
  - MLEM.Input.InputHandler.IsAnyPressed(System.Object[])
  - MLEM.Input.InputHandler.IsAnyUp(System.Object[])
  - MLEM.Input.InputHandler.IsDown(System.Object,System.Int32)
  - MLEM.Input.InputHandler.IsGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  - MLEM.Input.InputHandler.IsGamepadButtonPressed(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  - MLEM.Input.InputHandler.IsGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  - MLEM.Input.InputHandler.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)
  - MLEM.Input.InputHandler.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)
  - MLEM.Input.InputHandler.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)
  - MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  - MLEM.Input.InputHandler.IsMouseButtonDown(MLEM.Input.MouseButton)
  - MLEM.Input.InputHandler.IsMouseButtonPressed(MLEM.Input.MouseButton)
  - MLEM.Input.InputHandler.IsMouseButtonUp(MLEM.Input.MouseButton)
  - MLEM.Input.InputHandler.IsPressed(System.Object,System.Int32)
  - MLEM.Input.InputHandler.IsUp(System.Object,System.Int32)
  - MLEM.Input.InputHandler.KeyboardState
  - MLEM.Input.InputHandler.KeyRepeatDelay
  - MLEM.Input.InputHandler.KeyRepeatRate
  - MLEM.Input.InputHandler.LastKeyboardState
  - MLEM.Input.InputHandler.LastMousePosition
  - MLEM.Input.InputHandler.LastMouseState
  - MLEM.Input.InputHandler.LastScrollWheel
  - MLEM.Input.InputHandler.LastTouchState
  - MLEM.Input.InputHandler.MousePosition
  - MLEM.Input.InputHandler.MouseState
  - MLEM.Input.InputHandler.PressedKeys
  - MLEM.Input.InputHandler.ScrollWheel
  - MLEM.Input.InputHandler.TouchState
  - MLEM.Input.InputHandler.Update
  - MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  - MLEM.Input.InputHandler.WasGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  - MLEM.Input.InputHandler.WasGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  - MLEM.Input.InputHandler.WasKeyDown(Microsoft.Xna.Framework.Input.Keys)
  - MLEM.Input.InputHandler.WasKeyUp(Microsoft.Xna.Framework.Input.Keys)
  - MLEM.Input.InputHandler.WasMouseButtonDown(MLEM.Input.MouseButton)
  - MLEM.Input.InputHandler.WasMouseButtonUp(MLEM.Input.MouseButton)
  langs:
  - csharp
  - vb
  name: InputHandler
  nameWithType: InputHandler
  fullName: MLEM.Input.InputHandler
  type: Class
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: InputHandler
    path: ../MLEM/Input/InputHandler.cs
    startLine: 15
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nAn input handler is a more advanced wrapper around MonoGame&apos;s default input system.\nIt includes keyboard, mouse, gamepad and touch states, as well as a new &quot;pressed&quot; state for keys and the ability for keyboard and gamepad repeat events.\n"
  example: []
  syntax:
    content: 'public class InputHandler : GameComponent, IGameComponent, IUpdateable, IComparable<GameComponent>, IDisposable'
    content.vb: >-
      Public Class InputHandler

          Inherits GameComponent

          Implements IGameComponent, IUpdateable, IComparable(Of GameComponent), IDisposable
  inheritance:
  - System.Object
  - Microsoft.Xna.Framework.GameComponent
  implements:
  - Microsoft.Xna.Framework.IGameComponent
  - Microsoft.Xna.Framework.IUpdateable
  - System.IComparable{Microsoft.Xna.Framework.GameComponent}
  - System.IDisposable
  inheritedMembers:
  - Microsoft.Xna.Framework.GameComponent.Initialize
  - Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
  - Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
  - Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
  - Microsoft.Xna.Framework.GameComponent.Dispose
  - Microsoft.Xna.Framework.GameComponent.CompareTo(Microsoft.Xna.Framework.GameComponent)
  - Microsoft.Xna.Framework.GameComponent.Game
  - Microsoft.Xna.Framework.GameComponent.Enabled
  - Microsoft.Xna.Framework.GameComponent.UpdateOrder
  - Microsoft.Xna.Framework.GameComponent.EnabledChanged
  - Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MLEM.Input.InputHandler.LastKeyboardState
  commentId: P:MLEM.Input.InputHandler.LastKeyboardState
  id: LastKeyboardState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastKeyboardState
  nameWithType: InputHandler.LastKeyboardState
  fullName: MLEM.Input.InputHandler.LastKeyboardState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: LastKeyboardState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 20
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the keyboard state from the last update call\n"
  example: []
  syntax:
    content: public KeyboardState LastKeyboardState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.KeyboardState
    content.vb: Public ReadOnly Property LastKeyboardState As KeyboardState
  overload: MLEM.Input.InputHandler.LastKeyboardState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.KeyboardState
  commentId: P:MLEM.Input.InputHandler.KeyboardState
  id: KeyboardState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: KeyboardState
  nameWithType: InputHandler.KeyboardState
  fullName: MLEM.Input.InputHandler.KeyboardState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: KeyboardState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 24
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the current keyboard state\n"
  example: []
  syntax:
    content: public KeyboardState KeyboardState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.KeyboardState
    content.vb: Public ReadOnly Property KeyboardState As KeyboardState
  overload: MLEM.Input.InputHandler.KeyboardState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.PressedKeys
  commentId: P:MLEM.Input.InputHandler.PressedKeys
  id: PressedKeys
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: PressedKeys
  nameWithType: InputHandler.PressedKeys
  fullName: MLEM.Input.InputHandler.PressedKeys
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: PressedKeys
    path: ../MLEM/Input/InputHandler.cs
    startLine: 28
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the keyboard keys that are currently being pressed\n"
  example: []
  syntax:
    content: public Keys[] PressedKeys { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Keys[]
    content.vb: Public ReadOnly Property PressedKeys As Keys()
  overload: MLEM.Input.InputHandler.PressedKeys*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.HandleKeyboard
  commentId: F:MLEM.Input.InputHandler.HandleKeyboard
  id: HandleKeyboard
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleKeyboard
  nameWithType: InputHandler.HandleKeyboard
  fullName: MLEM.Input.InputHandler.HandleKeyboard
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: HandleKeyboard
    path: ../MLEM/Input/InputHandler.cs
    startLine: 32
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nSet this property to false to disable keyboard handling for this input handler.\n"
  example: []
  syntax:
    content: public bool HandleKeyboard
    return:
      type: System.Boolean
    content.vb: Public HandleKeyboard As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.LastMouseState
  commentId: P:MLEM.Input.InputHandler.LastMouseState
  id: LastMouseState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastMouseState
  nameWithType: InputHandler.LastMouseState
  fullName: MLEM.Input.InputHandler.LastMouseState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: LastMouseState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 37
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the mouse state from the last update call\n"
  example: []
  syntax:
    content: public MouseState LastMouseState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.MouseState
    content.vb: Public ReadOnly Property LastMouseState As MouseState
  overload: MLEM.Input.InputHandler.LastMouseState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.MouseState
  commentId: P:MLEM.Input.InputHandler.MouseState
  id: MouseState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: MouseState
  nameWithType: InputHandler.MouseState
  fullName: MLEM.Input.InputHandler.MouseState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: MouseState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 41
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the current mouse state\n"
  example: []
  syntax:
    content: public MouseState MouseState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.MouseState
    content.vb: Public ReadOnly Property MouseState As MouseState
  overload: MLEM.Input.InputHandler.MouseState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.MousePosition
  commentId: P:MLEM.Input.InputHandler.MousePosition
  id: MousePosition
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: MousePosition
  nameWithType: InputHandler.MousePosition
  fullName: MLEM.Input.InputHandler.MousePosition
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: MousePosition
    path: ../MLEM/Input/InputHandler.cs
    startLine: 45
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the current position of the mouse, extracted from <xref href=\"MLEM.Input.InputHandler.MouseState\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Point MousePosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property MousePosition As Point
  overload: MLEM.Input.InputHandler.MousePosition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.LastMousePosition
  commentId: P:MLEM.Input.InputHandler.LastMousePosition
  id: LastMousePosition
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastMousePosition
  nameWithType: InputHandler.LastMousePosition
  fullName: MLEM.Input.InputHandler.LastMousePosition
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: LastMousePosition
    path: ../MLEM/Input/InputHandler.cs
    startLine: 49
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the position of the mouse from the last update call, extracted from <xref href=\"MLEM.Input.InputHandler.LastMouseState\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Point LastMousePosition { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Point
    content.vb: Public ReadOnly Property LastMousePosition As Point
  overload: MLEM.Input.InputHandler.LastMousePosition*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.ScrollWheel
  commentId: P:MLEM.Input.InputHandler.ScrollWheel
  id: ScrollWheel
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: ScrollWheel
  nameWithType: InputHandler.ScrollWheel
  fullName: MLEM.Input.InputHandler.ScrollWheel
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: ScrollWheel
    path: ../MLEM/Input/InputHandler.cs
    startLine: 53
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the current scroll wheel value, in increments of 120\n"
  example: []
  syntax:
    content: public int ScrollWheel { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ScrollWheel As Integer
  overload: MLEM.Input.InputHandler.ScrollWheel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.LastScrollWheel
  commentId: P:MLEM.Input.InputHandler.LastScrollWheel
  id: LastScrollWheel
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastScrollWheel
  nameWithType: InputHandler.LastScrollWheel
  fullName: MLEM.Input.InputHandler.LastScrollWheel
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: LastScrollWheel
    path: ../MLEM/Input/InputHandler.cs
    startLine: 57
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the scroll wheel value from the last update call, in increments of 120\n"
  example: []
  syntax:
    content: public int LastScrollWheel { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property LastScrollWheel As Integer
  overload: MLEM.Input.InputHandler.LastScrollWheel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.HandleMouse
  commentId: F:MLEM.Input.InputHandler.HandleMouse
  id: HandleMouse
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleMouse
  nameWithType: InputHandler.HandleMouse
  fullName: MLEM.Input.InputHandler.HandleMouse
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: HandleMouse
    path: ../MLEM/Input/InputHandler.cs
    startLine: 61
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nSet this property to false to disable mouse handling for this input handler.\n"
  example: []
  syntax:
    content: public bool HandleMouse
    return:
      type: System.Boolean
    content.vb: Public HandleMouse As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.ConnectedGamepads
  commentId: P:MLEM.Input.InputHandler.ConnectedGamepads
  id: ConnectedGamepads
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: ConnectedGamepads
  nameWithType: InputHandler.ConnectedGamepads
  fullName: MLEM.Input.InputHandler.ConnectedGamepads
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: ConnectedGamepads
    path: ../MLEM/Input/InputHandler.cs
    startLine: 69
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the amount of gamepads that are currently connected.\nThis property is automatically updated in <xref href=\"MLEM.Input.InputHandler.Update\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public int ConnectedGamepads { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ConnectedGamepads As Integer
  overload: MLEM.Input.InputHandler.ConnectedGamepads*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.HandleGamepads
  commentId: F:MLEM.Input.InputHandler.HandleGamepads
  id: HandleGamepads
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleGamepads
  nameWithType: InputHandler.HandleGamepads
  fullName: MLEM.Input.InputHandler.HandleGamepads
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: HandleGamepads
    path: ../MLEM/Input/InputHandler.cs
    startLine: 73
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nSet this property to false to disable keyboard handling for this input handler.\n"
  example: []
  syntax:
    content: public bool HandleGamepads
    return:
      type: System.Boolean
    content.vb: Public HandleGamepads As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.LastTouchState
  commentId: P:MLEM.Input.InputHandler.LastTouchState
  id: LastTouchState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: LastTouchState
  nameWithType: InputHandler.LastTouchState
  fullName: MLEM.Input.InputHandler.LastTouchState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: LastTouchState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 78
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the touch state from the last update call\n"
  example: []
  syntax:
    content: public TouchCollection LastTouchState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchCollection
    content.vb: Public ReadOnly Property LastTouchState As TouchCollection
  overload: MLEM.Input.InputHandler.LastTouchState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.TouchState
  commentId: P:MLEM.Input.InputHandler.TouchState
  id: TouchState
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: TouchState
  nameWithType: InputHandler.TouchState
  fullName: MLEM.Input.InputHandler.TouchState
  type: Property
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: TouchState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 82
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains the current touch state\n"
  example: []
  syntax:
    content: public TouchCollection TouchState { get; }
    parameters: []
    return:
      type: Microsoft.Xna.Framework.Input.Touch.TouchCollection
    content.vb: Public ReadOnly Property TouchState As TouchCollection
  overload: MLEM.Input.InputHandler.TouchState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.Gestures
  commentId: F:MLEM.Input.InputHandler.Gestures
  id: Gestures
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: Gestures
  nameWithType: InputHandler.Gestures
  fullName: MLEM.Input.InputHandler.Gestures
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Gestures
    path: ../MLEM/Input/InputHandler.cs
    startLine: 87
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nContains all of the gestures that have finished during the last update call.\nTo easily query these gestures, use <xref href=\"MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType%2cMicrosoft.Xna.Framework.Input.Touch.GestureSample%40)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public readonly ReadOnlyCollection<GestureSample> Gestures
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Input.Touch.GestureSample}
    content.vb: Public ReadOnly Gestures As ReadOnlyCollection(Of GestureSample)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MLEM.Input.InputHandler.HandleTouch
  commentId: F:MLEM.Input.InputHandler.HandleTouch
  id: HandleTouch
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleTouch
  nameWithType: InputHandler.HandleTouch
  fullName: MLEM.Input.InputHandler.HandleTouch
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: HandleTouch
    path: ../MLEM/Input/InputHandler.cs
    startLine: 92
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nSet this property to false to disable touch handling for this input handler.\n"
  example: []
  syntax:
    content: public bool HandleTouch
    return:
      type: System.Boolean
    content.vb: Public HandleTouch As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.KeyRepeatDelay
  commentId: F:MLEM.Input.InputHandler.KeyRepeatDelay
  id: KeyRepeatDelay
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: KeyRepeatDelay
  nameWithType: InputHandler.KeyRepeatDelay
  fullName: MLEM.Input.InputHandler.KeyRepeatDelay
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: KeyRepeatDelay
    path: ../MLEM/Input/InputHandler.cs
    startLine: 98
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nThis is the amount of time that has to pass before the first keyboard repeat event is triggered.\n<xref href=\"MLEM.Input.InputHandler.KeyRepeatRate\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public TimeSpan KeyRepeatDelay
    return:
      type: System.TimeSpan
    content.vb: Public KeyRepeatDelay As TimeSpan
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.KeyRepeatRate
  commentId: F:MLEM.Input.InputHandler.KeyRepeatRate
  id: KeyRepeatRate
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: KeyRepeatRate
  nameWithType: InputHandler.KeyRepeatRate
  fullName: MLEM.Input.InputHandler.KeyRepeatRate
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: KeyRepeatRate
    path: ../MLEM/Input/InputHandler.cs
    startLine: 103
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nThis is the amount of time that has to pass between keyboard repeat events.\n<xref href=\"MLEM.Input.InputHandler.KeyRepeatDelay\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public TimeSpan KeyRepeatRate
    return:
      type: System.TimeSpan
    content.vb: Public KeyRepeatRate As TimeSpan
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.HandleKeyboardRepeats
  commentId: F:MLEM.Input.InputHandler.HandleKeyboardRepeats
  id: HandleKeyboardRepeats
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleKeyboardRepeats
  nameWithType: InputHandler.HandleKeyboardRepeats
  fullName: MLEM.Input.InputHandler.HandleKeyboardRepeats
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: HandleKeyboardRepeats
    path: ../MLEM/Input/InputHandler.cs
    startLine: 108
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nSet this property to false to disable keyboard repeat event handling.\n"
  example: []
  syntax:
    content: public bool HandleKeyboardRepeats
    return:
      type: System.Boolean
    content.vb: Public HandleKeyboardRepeats As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.HandleGamepadRepeats
  commentId: F:MLEM.Input.InputHandler.HandleGamepadRepeats
  id: HandleGamepadRepeats
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: HandleGamepadRepeats
  nameWithType: InputHandler.HandleGamepadRepeats
  fullName: MLEM.Input.InputHandler.HandleGamepadRepeats
  type: Field
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: HandleGamepadRepeats
    path: ../MLEM/Input/InputHandler.cs
    startLine: 117
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nSet this property to false to disable gamepad repeat event handling.\n"
  example: []
  syntax:
    content: public bool HandleGamepadRepeats
    return:
      type: System.Boolean
    content.vb: Public HandleGamepadRepeats As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:MLEM.Input.InputHandler.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)'
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: InputHandler(Boolean, Boolean, Boolean, Boolean)
  nameWithType: InputHandler.InputHandler(Boolean, Boolean, Boolean, Boolean)
  fullName: MLEM.Input.InputHandler.InputHandler(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM/Input/InputHandler.cs
    startLine: 130
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nCreates a new input handler with optional initial values.\n"
  example: []
  syntax:
    content: public InputHandler(bool handleKeyboard = true, bool handleMouse = true, bool handleGamepads = true, bool handleTouch = true)
    parameters:
    - id: handleKeyboard
      type: System.Boolean
      description: If keyboard input should be handled
    - id: handleMouse
      type: System.Boolean
      description: If mouse input should be handled
    - id: handleGamepads
      type: System.Boolean
      description: If gamepad input should be handled
    - id: handleTouch
      type: System.Boolean
      description: If touch input should be handled
    content.vb: Public Sub New(handleKeyboard As Boolean = True, handleMouse As Boolean = True, handleGamepads As Boolean = True, handleTouch As Boolean = True)
  overload: MLEM.Input.InputHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.Update
  commentId: M:MLEM.Input.InputHandler.Update
  id: Update
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: InputHandler.Update()
  fullName: MLEM.Input.InputHandler.Update()
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Update
    path: ../MLEM/Input/InputHandler.cs
    startLine: 142
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nUpdates this input handler, querying pressed and released keys and calculating repeat events.\nCall this in your <xref href=\"Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public void Update()
    content.vb: Public Sub Update
  overload: MLEM.Input.InputHandler.Update*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  id: Update(Microsoft.Xna.Framework.GameTime)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: Update(GameTime)
  nameWithType: InputHandler.Update(GameTime)
  fullName: MLEM.Input.InputHandler.Update(Microsoft.Xna.Framework.GameTime)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Update
    path: ../MLEM/Input/InputHandler.cs
    startLine: 236
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public override void Update(GameTime gameTime)
    parameters:
    - id: gameTime
      type: Microsoft.Xna.Framework.GameTime
    content.vb: Public Overrides Sub Update(gameTime As GameTime)
  overridden: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  overload: MLEM.Input.InputHandler.Update*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: MLEM.Input.InputHandler.GetLastGamepadState(System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetLastGamepadState(System.Int32)
  id: GetLastGamepadState(System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetLastGamepadState(Int32)
  nameWithType: InputHandler.GetLastGamepadState(Int32)
  fullName: MLEM.Input.InputHandler.GetLastGamepadState(System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetLastGamepadState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 245
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns the state of the <code>index</code>th gamepad from the last update call\n"
  example: []
  syntax:
    content: public GamePadState GetLastGamepadState(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based gamepad index
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The state of the gamepad last update
    content.vb: Public Function GetLastGamepadState(index As Integer) As GamePadState
  overload: MLEM.Input.InputHandler.GetLastGamepadState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.GetGamepadState(System.Int32)
  commentId: M:MLEM.Input.InputHandler.GetGamepadState(System.Int32)
  id: GetGamepadState(System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetGamepadState(Int32)
  nameWithType: InputHandler.GetGamepadState(Int32)
  fullName: MLEM.Input.InputHandler.GetGamepadState(System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetGamepadState
    path: ../MLEM/Input/InputHandler.cs
    startLine: 254
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns the current state of the <code>index</code>th gamepad\n"
  example: []
  syntax:
    content: public GamePadState GetGamepadState(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based gamepad index
    return:
      type: Microsoft.Xna.Framework.Input.GamePadState
      description: The current state of the gamepad
    content.vb: Public Function GetGamepadState(index As Integer) As GamePadState
  overload: MLEM.Input.InputHandler.GetGamepadState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:MLEM.Input.InputHandler.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)
  id: IsKeyDown(Microsoft.Xna.Framework.Input.Keys)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsKeyDown(Keys)
  nameWithType: InputHandler.IsKeyDown(Keys)
  fullName: MLEM.Input.InputHandler.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsKeyDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 259
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool IsKeyDown(Keys key)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
    return:
      type: System.Boolean
    content.vb: Public Function IsKeyDown(key As Keys) As Boolean
  overload: MLEM.Input.InputHandler.IsKeyDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:MLEM.Input.InputHandler.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)
  id: IsKeyUp(Microsoft.Xna.Framework.Input.Keys)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsKeyUp(Keys)
  nameWithType: InputHandler.IsKeyUp(Keys)
  fullName: MLEM.Input.InputHandler.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsKeyUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 264
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool IsKeyUp(Keys key)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
    return:
      type: System.Boolean
    content.vb: Public Function IsKeyUp(key As Keys) As Boolean
  overload: MLEM.Input.InputHandler.IsKeyUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.WasKeyDown(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:MLEM.Input.InputHandler.WasKeyDown(Microsoft.Xna.Framework.Input.Keys)
  id: WasKeyDown(Microsoft.Xna.Framework.Input.Keys)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasKeyDown(Keys)
  nameWithType: InputHandler.WasKeyDown(Keys)
  fullName: MLEM.Input.InputHandler.WasKeyDown(Microsoft.Xna.Framework.Input.Keys)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: WasKeyDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 269
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool WasKeyDown(Keys key)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
    return:
      type: System.Boolean
    content.vb: Public Function WasKeyDown(key As Keys) As Boolean
  overload: MLEM.Input.InputHandler.WasKeyDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.WasKeyUp(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:MLEM.Input.InputHandler.WasKeyUp(Microsoft.Xna.Framework.Input.Keys)
  id: WasKeyUp(Microsoft.Xna.Framework.Input.Keys)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasKeyUp(Keys)
  nameWithType: InputHandler.WasKeyUp(Keys)
  fullName: MLEM.Input.InputHandler.WasKeyUp(Microsoft.Xna.Framework.Input.Keys)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: WasKeyUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 274
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool WasKeyUp(Keys key)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
    return:
      type: System.Boolean
    content.vb: Public Function WasKeyUp(key As Keys) As Boolean
  overload: MLEM.Input.InputHandler.WasKeyUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:MLEM.Input.InputHandler.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)
  id: IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsKeyPressed(Keys)
  nameWithType: InputHandler.IsKeyPressed(Keys)
  fullName: MLEM.Input.InputHandler.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsKeyPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 284
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given key is considered pressed.\nA key is considered pressed if it was not down the last update call, but is down the current update call.\n"
  example: []
  syntax:
    content: public bool IsKeyPressed(Keys key)
    parameters:
    - id: key
      type: Microsoft.Xna.Framework.Input.Keys
      description: The key to query
    return:
      type: System.Boolean
      description: If the key is pressed
    content.vb: Public Function IsKeyPressed(key As Keys) As Boolean
  overload: MLEM.Input.InputHandler.IsKeyPressed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  commentId: M:MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  id: IsModifierKeyDown(MLEM.Input.ModifierKey)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsModifierKeyDown(ModifierKey)
  nameWithType: InputHandler.IsModifierKeyDown(ModifierKey)
  fullName: MLEM.Input.InputHandler.IsModifierKeyDown(MLEM.Input.ModifierKey)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsModifierKeyDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 296
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given modifier key is down.\n"
  example: []
  syntax:
    content: public bool IsModifierKeyDown(ModifierKey modifier)
    parameters:
    - id: modifier
      type: MLEM.Input.ModifierKey
      description: The modifier key
    return:
      type: System.Boolean
      description: If the modifier key is down
    content.vb: Public Function IsModifierKeyDown(modifier As ModifierKey) As Boolean
  overload: MLEM.Input.InputHandler.IsModifierKeyDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsMouseButtonDown(MLEM.Input.MouseButton)
  commentId: M:MLEM.Input.InputHandler.IsMouseButtonDown(MLEM.Input.MouseButton)
  id: IsMouseButtonDown(MLEM.Input.MouseButton)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsMouseButtonDown(MouseButton)
  nameWithType: InputHandler.IsMouseButtonDown(MouseButton)
  fullName: MLEM.Input.InputHandler.IsMouseButtonDown(MLEM.Input.MouseButton)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsMouseButtonDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 305
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given mouse button is currently down.\n"
  example: []
  syntax:
    content: public bool IsMouseButtonDown(MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button to query
    return:
      type: System.Boolean
      description: Whether or not the queried button is down
    content.vb: Public Function IsMouseButtonDown(button As MouseButton) As Boolean
  overload: MLEM.Input.InputHandler.IsMouseButtonDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsMouseButtonUp(MLEM.Input.MouseButton)
  commentId: M:MLEM.Input.InputHandler.IsMouseButtonUp(MLEM.Input.MouseButton)
  id: IsMouseButtonUp(MLEM.Input.MouseButton)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsMouseButtonUp(MouseButton)
  nameWithType: InputHandler.IsMouseButtonUp(MouseButton)
  fullName: MLEM.Input.InputHandler.IsMouseButtonUp(MLEM.Input.MouseButton)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsMouseButtonUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 314
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given mouse button is currently up.\n"
  example: []
  syntax:
    content: public bool IsMouseButtonUp(MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button to query
    return:
      type: System.Boolean
      description: Whether or not the queried button is up
    content.vb: Public Function IsMouseButtonUp(button As MouseButton) As Boolean
  overload: MLEM.Input.InputHandler.IsMouseButtonUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.WasMouseButtonDown(MLEM.Input.MouseButton)
  commentId: M:MLEM.Input.InputHandler.WasMouseButtonDown(MLEM.Input.MouseButton)
  id: WasMouseButtonDown(MLEM.Input.MouseButton)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasMouseButtonDown(MouseButton)
  nameWithType: InputHandler.WasMouseButtonDown(MouseButton)
  fullName: MLEM.Input.InputHandler.WasMouseButtonDown(MLEM.Input.MouseButton)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: WasMouseButtonDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 323
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given mouse button was down the last update call.\n"
  example: []
  syntax:
    content: public bool WasMouseButtonDown(MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button to query
    return:
      type: System.Boolean
      description: Whether or not the queried button was down
    content.vb: Public Function WasMouseButtonDown(button As MouseButton) As Boolean
  overload: MLEM.Input.InputHandler.WasMouseButtonDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.WasMouseButtonUp(MLEM.Input.MouseButton)
  commentId: M:MLEM.Input.InputHandler.WasMouseButtonUp(MLEM.Input.MouseButton)
  id: WasMouseButtonUp(MLEM.Input.MouseButton)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasMouseButtonUp(MouseButton)
  nameWithType: InputHandler.WasMouseButtonUp(MouseButton)
  fullName: MLEM.Input.InputHandler.WasMouseButtonUp(MLEM.Input.MouseButton)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: WasMouseButtonUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 332
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given mouse button was up the last update call.\n"
  example: []
  syntax:
    content: public bool WasMouseButtonUp(MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button to query
    return:
      type: System.Boolean
      description: Whether or not the queried button was up
    content.vb: Public Function WasMouseButtonUp(button As MouseButton) As Boolean
  overload: MLEM.Input.InputHandler.WasMouseButtonUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsMouseButtonPressed(MLEM.Input.MouseButton)
  commentId: M:MLEM.Input.InputHandler.IsMouseButtonPressed(MLEM.Input.MouseButton)
  id: IsMouseButtonPressed(MLEM.Input.MouseButton)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsMouseButtonPressed(MouseButton)
  nameWithType: InputHandler.IsMouseButtonPressed(MouseButton)
  fullName: MLEM.Input.InputHandler.IsMouseButtonPressed(MLEM.Input.MouseButton)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsMouseButtonPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 342
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given mouse button is considered pressed.\nA mouse button is considered pressed if it was up the last update call, and is down the current update call.\n"
  example: []
  syntax:
    content: public bool IsMouseButtonPressed(MouseButton button)
    parameters:
    - id: button
      type: MLEM.Input.MouseButton
      description: The button to query
    return:
      type: System.Boolean
      description: Whether the button is pressed
    content.vb: Public Function IsMouseButtonPressed(button As MouseButton) As Boolean
  overload: MLEM.Input.InputHandler.IsMouseButtonPressed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  id: IsGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsGamepadButtonDown(Buttons, Int32)
  nameWithType: InputHandler.IsGamepadButtonDown(Buttons, Int32)
  fullName: MLEM.Input.InputHandler.IsGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsGamepadButtonDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 347
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool IsGamepadButtonDown(Buttons button, int index = -1)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function IsGamepadButtonDown(button As Buttons, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsGamepadButtonDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  id: IsGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsGamepadButtonUp(Buttons, Int32)
  nameWithType: InputHandler.IsGamepadButtonUp(Buttons, Int32)
  fullName: MLEM.Input.InputHandler.IsGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsGamepadButtonUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 358
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool IsGamepadButtonUp(Buttons button, int index = -1)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function IsGamepadButtonUp(button As Buttons, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsGamepadButtonUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.WasGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  id: WasGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasGamepadButtonDown(Buttons, Int32)
  nameWithType: InputHandler.WasGamepadButtonDown(Buttons, Int32)
  fullName: MLEM.Input.InputHandler.WasGamepadButtonDown(Microsoft.Xna.Framework.Input.Buttons, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: WasGamepadButtonDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 369
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool WasGamepadButtonDown(Buttons button, int index = -1)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function WasGamepadButtonDown(button As Buttons, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.WasGamepadButtonDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.WasGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  commentId: M:MLEM.Input.InputHandler.WasGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  id: WasGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: WasGamepadButtonUp(Buttons, Int32)
  nameWithType: InputHandler.WasGamepadButtonUp(Buttons, Int32)
  fullName: MLEM.Input.InputHandler.WasGamepadButtonUp(Microsoft.Xna.Framework.Input.Buttons, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: WasGamepadButtonUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 380
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool WasGamepadButtonUp(Buttons button, int index = -1)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function WasGamepadButtonUp(button As Buttons, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.WasGamepadButtonUp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsGamepadButtonPressed(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsGamepadButtonPressed(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  id: IsGamepadButtonPressed(Microsoft.Xna.Framework.Input.Buttons,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsGamepadButtonPressed(Buttons, Int32)
  nameWithType: InputHandler.IsGamepadButtonPressed(Buttons, Int32)
  fullName: MLEM.Input.InputHandler.IsGamepadButtonPressed(Microsoft.Xna.Framework.Input.Buttons, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsGamepadButtonPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 397
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns whether the given gamepad button on the given index is considered pressed.\nA gamepad button is considered pressed if it was down the last update call, and is up the current update call.\n"
  example: []
  syntax:
    content: public bool IsGamepadButtonPressed(Buttons button, int index = -1)
    parameters:
    - id: button
      type: Microsoft.Xna.Framework.Input.Buttons
      description: The button to query
    - id: index
      type: System.Int32
      description: The zero-based index of the gamepad, or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given button is pressed
    content.vb: Public Function IsGamepadButtonPressed(button As Buttons, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsGamepadButtonPressed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  commentId: M:MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  id: GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: GetGesture(GestureType, out GestureSample)
  nameWithType: InputHandler.GetGesture(GestureType, out GestureSample)
  fullName: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, out Microsoft.Xna.Framework.Input.Touch.GestureSample)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: GetGesture
    path: ../MLEM/Input/InputHandler.cs
    startLine: 416
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nQueries for a gesture of a given type that finished during the current update call.\n"
  example: []
  syntax:
    content: public bool GetGesture(GestureType type, out GestureSample sample)
    parameters:
    - id: type
      type: Microsoft.Xna.Framework.Input.Touch.GestureType
      description: The type of gesture to query for
    - id: sample
      type: Microsoft.Xna.Framework.Input.Touch.GestureSample
      description: The resulting gesture sample, or default if there isn&apos;t one
    return:
      type: System.Boolean
      description: True if a gesture of the type was found, otherwise false
    content.vb: Public Function GetGesture(type As GestureType, ByRef sample As GestureSample) As Boolean
  overload: MLEM.Input.InputHandler.GetGesture*
  nameWithType.vb: InputHandler.GetGesture(GestureType, ByRef GestureSample)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType, ByRef Microsoft.Xna.Framework.Input.Touch.GestureSample)
  name.vb: GetGesture(GestureType, ByRef GestureSample)
- uid: MLEM.Input.InputHandler.IsDown(System.Object,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsDown(System.Object,System.Int32)
  id: IsDown(System.Object,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsDown(Object, Int32)
  nameWithType: InputHandler.IsDown(Object, Int32)
  fullName: MLEM.Input.InputHandler.IsDown(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 434
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns if a given control of any kind is down.\nThis is a helper function that can be passed a <xref href=\"Microsoft.Xna.Framework.Input.Keys\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Xna.Framework.Input.Buttons\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"MLEM.Input.MouseButton\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsDown(object control, int index = -1)
    parameters:
    - id: control
      type: System.Object
      description: The control whose down state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control is down
    content.vb: Public Function IsDown(control As Object, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsDown*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the passed control isn&apos;t of a supported type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsUp(System.Object,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsUp(System.Object,System.Int32)
  id: IsUp(System.Object,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsUp(Object, Int32)
  nameWithType: InputHandler.IsUp(Object, Int32)
  fullName: MLEM.Input.InputHandler.IsUp(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 452
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns if a given control of any kind is up.\nThis is a helper function that can be passed a <xref href=\"Microsoft.Xna.Framework.Input.Keys\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Xna.Framework.Input.Buttons\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"MLEM.Input.MouseButton\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsUp(object control, int index = -1)
    parameters:
    - id: control
      type: System.Object
      description: The control whose up state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control is down
    content.vb: Public Function IsUp(control As Object, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsUp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the passed control isn&apos;t of a supported type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsPressed(System.Object,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressed(System.Object,System.Int32)
  id: IsPressed(System.Object,System.Int32)
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsPressed(Object, Int32)
  nameWithType: InputHandler.IsPressed(Object, Int32)
  fullName: MLEM.Input.InputHandler.IsPressed(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 470
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nReturns if a given control of any kind is pressed.\nThis is a helper function that can be passed a <xref href=\"Microsoft.Xna.Framework.Input.Keys\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.Xna.Framework.Input.Buttons\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"MLEM.Input.MouseButton\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsPressed(object control, int index = -1)
    parameters:
    - id: control
      type: System.Object
      description: The control whose pressed state to query
    - id: index
      type: System.Int32
      description: The index of the gamepad to query (if applicable), or -1 for any gamepad
    return:
      type: System.Boolean
      description: Whether the given control is down
    content.vb: Public Function IsPressed(control As Object, index As Integer = -1) As Boolean
  overload: MLEM.Input.InputHandler.IsPressed*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If the passed control isn&apos;t of a supported type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MLEM.Input.InputHandler.IsAnyDown(System.Object[])
  commentId: M:MLEM.Input.InputHandler.IsAnyDown(System.Object[])
  id: IsAnyDown(System.Object[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsAnyDown(Object[])
  nameWithType: InputHandler.IsAnyDown(Object[])
  fullName: MLEM.Input.InputHandler.IsAnyDown(System.Object[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsAnyDown
    path: ../MLEM/Input/InputHandler.cs
    startLine: 481
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool IsAnyDown(params object[] control)
    parameters:
    - id: control
      type: System.Object[]
    return:
      type: System.Boolean
    content.vb: Public Function IsAnyDown(ParamArray control As Object()) As Boolean
  overload: MLEM.Input.InputHandler.IsAnyDown*
  nameWithType.vb: InputHandler.IsAnyDown(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Input.InputHandler.IsAnyDown(System.Object())
  name.vb: IsAnyDown(Object())
- uid: MLEM.Input.InputHandler.IsAnyUp(System.Object[])
  commentId: M:MLEM.Input.InputHandler.IsAnyUp(System.Object[])
  id: IsAnyUp(System.Object[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsAnyUp(Object[])
  nameWithType: InputHandler.IsAnyUp(Object[])
  fullName: MLEM.Input.InputHandler.IsAnyUp(System.Object[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsAnyUp
    path: ../MLEM/Input/InputHandler.cs
    startLine: 486
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool IsAnyUp(params object[] control)
    parameters:
    - id: control
      type: System.Object[]
    return:
      type: System.Boolean
    content.vb: Public Function IsAnyUp(ParamArray control As Object()) As Boolean
  overload: MLEM.Input.InputHandler.IsAnyUp*
  nameWithType.vb: InputHandler.IsAnyUp(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Input.InputHandler.IsAnyUp(System.Object())
  name.vb: IsAnyUp(Object())
- uid: MLEM.Input.InputHandler.IsAnyPressed(System.Object[])
  commentId: M:MLEM.Input.InputHandler.IsAnyPressed(System.Object[])
  id: IsAnyPressed(System.Object[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: IsAnyPressed(Object[])
  nameWithType: InputHandler.IsAnyPressed(Object[])
  fullName: MLEM.Input.InputHandler.IsAnyPressed(System.Object[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: IsAnyPressed
    path: ../MLEM/Input/InputHandler.cs
    startLine: 491
  assemblies:
  - MLEM
  namespace: MLEM.Input
  example: []
  syntax:
    content: public bool IsAnyPressed(params object[] control)
    parameters:
    - id: control
      type: System.Object[]
    return:
      type: System.Boolean
    content.vb: Public Function IsAnyPressed(ParamArray control As Object()) As Boolean
  overload: MLEM.Input.InputHandler.IsAnyPressed*
  nameWithType.vb: InputHandler.IsAnyPressed(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Input.InputHandler.IsAnyPressed(System.Object())
  name.vb: IsAnyPressed(Object())
- uid: MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  commentId: M:MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  id: EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  parent: MLEM.Input.InputHandler
  langs:
  - csharp
  - vb
  name: EnableGestures(GestureType[])
  nameWithType: InputHandler.EnableGestures(GestureType[])
  fullName: MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType[])
  type: Method
  source:
    remote:
      path: MLEM/Input/InputHandler.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: EnableGestures
    path: ../MLEM/Input/InputHandler.cs
    startLine: 500
  assemblies:
  - MLEM
  namespace: MLEM.Input
  summary: "\nHelper function to enable gestures for a <xref href=\"Microsoft.Xna.Framework.Input.Touch.TouchPanel\" data-throw-if-not-resolved=\"false\"></xref> easily.\nNote that, if other gestures were previously enabled, they will not get overridden.\n"
  example: []
  syntax:
    content: public static void EnableGestures(params GestureType[] gestures)
    parameters:
    - id: gestures
      type: Microsoft.Xna.Framework.Input.Touch.GestureType[]
      description: The gestures to enable
    content.vb: Public Shared Sub EnableGestures(ParamArray gestures As GestureType())
  overload: MLEM.Input.InputHandler.EnableGestures*
  nameWithType.vb: InputHandler.EnableGestures(GestureType())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MLEM.Input.InputHandler.EnableGestures(Microsoft.Xna.Framework.Input.Touch.GestureType())
  name.vb: EnableGestures(GestureType())
references:
- uid: MLEM.Input
  commentId: N:MLEM.Input
  name: MLEM.Input
  nameWithType: MLEM.Input
  fullName: MLEM.Input
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Xna.Framework.GameComponent
  commentId: T:Microsoft.Xna.Framework.GameComponent
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameComponent
  nameWithType: GameComponent
  fullName: Microsoft.Xna.Framework.GameComponent
- uid: Microsoft.Xna.Framework.IGameComponent
  commentId: T:Microsoft.Xna.Framework.IGameComponent
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: IGameComponent
  nameWithType: IGameComponent
  fullName: Microsoft.Xna.Framework.IGameComponent
- uid: Microsoft.Xna.Framework.IUpdateable
  commentId: T:Microsoft.Xna.Framework.IUpdateable
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Microsoft.Xna.Framework.IUpdateable
- uid: System.IComparable{Microsoft.Xna.Framework.GameComponent}
  commentId: T:System.IComparable{Microsoft.Xna.Framework.GameComponent}
  parent: System
  definition: System.IComparable`1
  name: IComparable<GameComponent>
  nameWithType: IComparable<GameComponent>
  fullName: System.IComparable<Microsoft.Xna.Framework.GameComponent>
  nameWithType.vb: IComparable(Of GameComponent)
  fullName.vb: System.IComparable(Of Microsoft.Xna.Framework.GameComponent)
  name.vb: IComparable(Of GameComponent)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.GameComponent
    name: GameComponent
    nameWithType: GameComponent
    fullName: Microsoft.Xna.Framework.GameComponent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.GameComponent
    name: GameComponent
    nameWithType: GameComponent
    fullName: Microsoft.Xna.Framework.GameComponent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.Xna.Framework.GameComponent.Initialize
  commentId: M:Microsoft.Xna.Framework.GameComponent.Initialize
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Initialize()
  nameWithType: GameComponent.Initialize()
  fullName: Microsoft.Xna.Framework.GameComponent.Initialize()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Initialize
    name: Initialize
    nameWithType: GameComponent.Initialize
    fullName: Microsoft.Xna.Framework.GameComponent.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Initialize
    name: Initialize
    nameWithType: GameComponent.Initialize
    fullName: Microsoft.Xna.Framework.GameComponent.Initialize
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
  commentId: M:Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: OnUpdateOrderChanged(Object, EventArgs)
  nameWithType: GameComponent.OnUpdateOrderChanged(Object, EventArgs)
  fullName: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object, System.EventArgs)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
    name: OnUpdateOrderChanged
    nameWithType: GameComponent.OnUpdateOrderChanged
    fullName: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged(System.Object,System.EventArgs)
    name: OnUpdateOrderChanged
    nameWithType: GameComponent.OnUpdateOrderChanged
    fullName: Microsoft.Xna.Framework.GameComponent.OnUpdateOrderChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
  commentId: M:Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: OnEnabledChanged(Object, EventArgs)
  nameWithType: GameComponent.OnEnabledChanged(Object, EventArgs)
  fullName: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object, System.EventArgs)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
    name: OnEnabledChanged
    nameWithType: GameComponent.OnEnabledChanged
    fullName: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged(System.Object,System.EventArgs)
    name: OnEnabledChanged
    nameWithType: GameComponent.OnEnabledChanged
    fullName: Microsoft.Xna.Framework.GameComponent.OnEnabledChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
  commentId: M:Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: GameComponent.Dispose(Boolean)
  fullName: Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
    name: Dispose
    nameWithType: GameComponent.Dispose
    fullName: Microsoft.Xna.Framework.GameComponent.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)
    name: Dispose
    nameWithType: GameComponent.Dispose
    fullName: Microsoft.Xna.Framework.GameComponent.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameComponent.Dispose
  commentId: M:Microsoft.Xna.Framework.GameComponent.Dispose
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Dispose()
  nameWithType: GameComponent.Dispose()
  fullName: Microsoft.Xna.Framework.GameComponent.Dispose()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose
    name: Dispose
    nameWithType: GameComponent.Dispose
    fullName: Microsoft.Xna.Framework.GameComponent.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Dispose
    name: Dispose
    nameWithType: GameComponent.Dispose
    fullName: Microsoft.Xna.Framework.GameComponent.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameComponent.CompareTo(Microsoft.Xna.Framework.GameComponent)
  commentId: M:Microsoft.Xna.Framework.GameComponent.CompareTo(Microsoft.Xna.Framework.GameComponent)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: CompareTo(GameComponent)
  nameWithType: GameComponent.CompareTo(GameComponent)
  fullName: Microsoft.Xna.Framework.GameComponent.CompareTo(Microsoft.Xna.Framework.GameComponent)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.CompareTo(Microsoft.Xna.Framework.GameComponent)
    name: CompareTo
    nameWithType: GameComponent.CompareTo
    fullName: Microsoft.Xna.Framework.GameComponent.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameComponent
    name: GameComponent
    nameWithType: GameComponent
    fullName: Microsoft.Xna.Framework.GameComponent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.CompareTo(Microsoft.Xna.Framework.GameComponent)
    name: CompareTo
    nameWithType: GameComponent.CompareTo
    fullName: Microsoft.Xna.Framework.GameComponent.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameComponent
    name: GameComponent
    nameWithType: GameComponent
    fullName: Microsoft.Xna.Framework.GameComponent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameComponent.Game
  commentId: P:Microsoft.Xna.Framework.GameComponent.Game
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Game
  nameWithType: GameComponent.Game
  fullName: Microsoft.Xna.Framework.GameComponent.Game
- uid: Microsoft.Xna.Framework.GameComponent.Enabled
  commentId: P:Microsoft.Xna.Framework.GameComponent.Enabled
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Enabled
  nameWithType: GameComponent.Enabled
  fullName: Microsoft.Xna.Framework.GameComponent.Enabled
- uid: Microsoft.Xna.Framework.GameComponent.UpdateOrder
  commentId: P:Microsoft.Xna.Framework.GameComponent.UpdateOrder
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: UpdateOrder
  nameWithType: GameComponent.UpdateOrder
  fullName: Microsoft.Xna.Framework.GameComponent.UpdateOrder
- uid: Microsoft.Xna.Framework.GameComponent.EnabledChanged
  commentId: E:Microsoft.Xna.Framework.GameComponent.EnabledChanged
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: EnabledChanged
  nameWithType: GameComponent.EnabledChanged
  fullName: Microsoft.Xna.Framework.GameComponent.EnabledChanged
- uid: Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
  commentId: E:Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: UpdateOrderChanged
  nameWithType: GameComponent.UpdateOrderChanged
  fullName: Microsoft.Xna.Framework.GameComponent.UpdateOrderChanged
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Input.InputHandler.LastKeyboardState*
  commentId: Overload:MLEM.Input.InputHandler.LastKeyboardState
  name: LastKeyboardState
  nameWithType: InputHandler.LastKeyboardState
  fullName: MLEM.Input.InputHandler.LastKeyboardState
- uid: Microsoft.Xna.Framework.Input.KeyboardState
  commentId: T:Microsoft.Xna.Framework.Input.KeyboardState
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: KeyboardState
  nameWithType: KeyboardState
  fullName: Microsoft.Xna.Framework.Input.KeyboardState
- uid: Microsoft.Xna.Framework.Input
  commentId: N:Microsoft.Xna.Framework.Input
  isExternal: true
  name: Microsoft.Xna.Framework.Input
  nameWithType: Microsoft.Xna.Framework.Input
  fullName: Microsoft.Xna.Framework.Input
- uid: MLEM.Input.InputHandler.KeyboardState*
  commentId: Overload:MLEM.Input.InputHandler.KeyboardState
  name: KeyboardState
  nameWithType: InputHandler.KeyboardState
  fullName: MLEM.Input.InputHandler.KeyboardState
- uid: MLEM.Input.InputHandler.PressedKeys*
  commentId: Overload:MLEM.Input.InputHandler.PressedKeys
  name: PressedKeys
  nameWithType: InputHandler.PressedKeys
  fullName: MLEM.Input.InputHandler.PressedKeys
- uid: Microsoft.Xna.Framework.Input.Keys[]
  isExternal: true
  name: Keys[]
  nameWithType: Keys[]
  fullName: Microsoft.Xna.Framework.Input.Keys[]
  nameWithType.vb: Keys()
  fullName.vb: Microsoft.Xna.Framework.Input.Keys()
  name.vb: Keys()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Input.Keys
    name: Keys
    nameWithType: Keys
    fullName: Microsoft.Xna.Framework.Input.Keys
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Input.Keys
    name: Keys
    nameWithType: Keys
    fullName: Microsoft.Xna.Framework.Input.Keys
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MLEM.Input.InputHandler.LastMouseState*
  commentId: Overload:MLEM.Input.InputHandler.LastMouseState
  name: LastMouseState
  nameWithType: InputHandler.LastMouseState
  fullName: MLEM.Input.InputHandler.LastMouseState
- uid: Microsoft.Xna.Framework.Input.MouseState
  commentId: T:Microsoft.Xna.Framework.Input.MouseState
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: MouseState
  nameWithType: MouseState
  fullName: Microsoft.Xna.Framework.Input.MouseState
- uid: MLEM.Input.InputHandler.MouseState*
  commentId: Overload:MLEM.Input.InputHandler.MouseState
  name: MouseState
  nameWithType: InputHandler.MouseState
  fullName: MLEM.Input.InputHandler.MouseState
- uid: MLEM.Input.InputHandler.MouseState
  commentId: P:MLEM.Input.InputHandler.MouseState
  isExternal: true
- uid: MLEM.Input.InputHandler.MousePosition*
  commentId: Overload:MLEM.Input.InputHandler.MousePosition
  name: MousePosition
  nameWithType: InputHandler.MousePosition
  fullName: MLEM.Input.InputHandler.MousePosition
- uid: Microsoft.Xna.Framework.Point
  commentId: T:Microsoft.Xna.Framework.Point
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Point
  nameWithType: Point
  fullName: Microsoft.Xna.Framework.Point
- uid: MLEM.Input.InputHandler.LastMouseState
  commentId: P:MLEM.Input.InputHandler.LastMouseState
  isExternal: true
- uid: MLEM.Input.InputHandler.LastMousePosition*
  commentId: Overload:MLEM.Input.InputHandler.LastMousePosition
  name: LastMousePosition
  nameWithType: InputHandler.LastMousePosition
  fullName: MLEM.Input.InputHandler.LastMousePosition
- uid: MLEM.Input.InputHandler.ScrollWheel*
  commentId: Overload:MLEM.Input.InputHandler.ScrollWheel
  name: ScrollWheel
  nameWithType: InputHandler.ScrollWheel
  fullName: MLEM.Input.InputHandler.ScrollWheel
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MLEM.Input.InputHandler.LastScrollWheel*
  commentId: Overload:MLEM.Input.InputHandler.LastScrollWheel
  name: LastScrollWheel
  nameWithType: InputHandler.LastScrollWheel
  fullName: MLEM.Input.InputHandler.LastScrollWheel
- uid: MLEM.Input.InputHandler.Update
  commentId: M:MLEM.Input.InputHandler.Update
  isExternal: true
- uid: MLEM.Input.InputHandler.ConnectedGamepads*
  commentId: Overload:MLEM.Input.InputHandler.ConnectedGamepads
  name: ConnectedGamepads
  nameWithType: InputHandler.ConnectedGamepads
  fullName: MLEM.Input.InputHandler.ConnectedGamepads
- uid: MLEM.Input.InputHandler.LastTouchState*
  commentId: Overload:MLEM.Input.InputHandler.LastTouchState
  name: LastTouchState
  nameWithType: InputHandler.LastTouchState
  fullName: MLEM.Input.InputHandler.LastTouchState
- uid: Microsoft.Xna.Framework.Input.Touch.TouchCollection
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchCollection
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: TouchCollection
  nameWithType: TouchCollection
  fullName: Microsoft.Xna.Framework.Input.Touch.TouchCollection
- uid: Microsoft.Xna.Framework.Input.Touch
  commentId: N:Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: Microsoft.Xna.Framework.Input.Touch
  nameWithType: Microsoft.Xna.Framework.Input.Touch
  fullName: Microsoft.Xna.Framework.Input.Touch
- uid: MLEM.Input.InputHandler.TouchState*
  commentId: Overload:MLEM.Input.InputHandler.TouchState
  name: TouchState
  nameWithType: InputHandler.TouchState
  fullName: MLEM.Input.InputHandler.TouchState
- uid: MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  commentId: M:MLEM.Input.InputHandler.GetGesture(Microsoft.Xna.Framework.Input.Touch.GestureType,Microsoft.Xna.Framework.Input.Touch.GestureSample@)
  isExternal: true
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Input.Touch.GestureSample}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Xna.Framework.Input.Touch.GestureSample}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<GestureSample>
  nameWithType: ReadOnlyCollection<GestureSample>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Xna.Framework.Input.Touch.GestureSample>
  nameWithType.vb: ReadOnlyCollection(Of GestureSample)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Xna.Framework.Input.Touch.GestureSample)
  name.vb: ReadOnlyCollection(Of GestureSample)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    nameWithType: GestureSample
    fullName: Microsoft.Xna.Framework.Input.Touch.GestureSample
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
    name: GestureSample
    nameWithType: GestureSample
    fullName: Microsoft.Xna.Framework.Input.Touch.GestureSample
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: MLEM.Input.InputHandler.KeyRepeatRate
  commentId: F:MLEM.Input.InputHandler.KeyRepeatRate
  isExternal: true
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: MLEM.Input.InputHandler.KeyRepeatDelay
  commentId: F:MLEM.Input.InputHandler.KeyRepeatDelay
  isExternal: true
- uid: MLEM.Input.InputHandler.#ctor*
  commentId: Overload:MLEM.Input.InputHandler.#ctor
  name: InputHandler
  nameWithType: InputHandler.InputHandler
  fullName: MLEM.Input.InputHandler.InputHandler
- uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  parent: Microsoft.Xna.Framework.Game
  isExternal: true
  name: Update(GameTime)
  nameWithType: Game.Update(GameTime)
  fullName: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    nameWithType: Game.Update
    fullName: Microsoft.Xna.Framework.Game.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    nameWithType: Game.Update
    fullName: Microsoft.Xna.Framework.Game.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MLEM.Input.InputHandler.Update*
  commentId: Overload:MLEM.Input.InputHandler.Update
  name: Update
  nameWithType: InputHandler.Update
  fullName: MLEM.Input.InputHandler.Update
- uid: Microsoft.Xna.Framework.Game
  commentId: T:Microsoft.Xna.Framework.Game
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Game
  nameWithType: Game
  fullName: Microsoft.Xna.Framework.Game
- uid: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  commentId: M:Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  parent: Microsoft.Xna.Framework.GameComponent
  isExternal: true
  name: Update(GameTime)
  nameWithType: GameComponent.Update(GameTime)
  fullName: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
  spec.csharp:
  - uid: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    nameWithType: GameComponent.Update
    fullName: Microsoft.Xna.Framework.GameComponent.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Xna.Framework.GameComponent.Update(Microsoft.Xna.Framework.GameTime)
    name: Update
    nameWithType: GameComponent.Update
    fullName: Microsoft.Xna.Framework.GameComponent.Update
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Xna.Framework.GameTime
    name: GameTime
    nameWithType: GameTime
    fullName: Microsoft.Xna.Framework.GameTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Xna.Framework.GameTime
  commentId: T:Microsoft.Xna.Framework.GameTime
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: GameTime
  nameWithType: GameTime
  fullName: Microsoft.Xna.Framework.GameTime
- uid: MLEM.Input.InputHandler.GetLastGamepadState*
  commentId: Overload:MLEM.Input.InputHandler.GetLastGamepadState
  name: GetLastGamepadState
  nameWithType: InputHandler.GetLastGamepadState
  fullName: MLEM.Input.InputHandler.GetLastGamepadState
- uid: Microsoft.Xna.Framework.Input.GamePadState
  commentId: T:Microsoft.Xna.Framework.Input.GamePadState
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: GamePadState
  nameWithType: GamePadState
  fullName: Microsoft.Xna.Framework.Input.GamePadState
- uid: MLEM.Input.InputHandler.GetGamepadState*
  commentId: Overload:MLEM.Input.InputHandler.GetGamepadState
  name: GetGamepadState
  nameWithType: InputHandler.GetGamepadState
  fullName: MLEM.Input.InputHandler.GetGamepadState
- uid: Microsoft.Xna.Framework.Input.KeyboardState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)
  isExternal: true
- uid: MLEM.Input.InputHandler.IsKeyDown*
  commentId: Overload:MLEM.Input.InputHandler.IsKeyDown
  name: IsKeyDown
  nameWithType: InputHandler.IsKeyDown
  fullName: MLEM.Input.InputHandler.IsKeyDown
- uid: Microsoft.Xna.Framework.Input.Keys
  commentId: T:Microsoft.Xna.Framework.Input.Keys
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Keys
  nameWithType: Keys
  fullName: Microsoft.Xna.Framework.Input.Keys
- uid: Microsoft.Xna.Framework.Input.KeyboardState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)
  commentId: M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)
  isExternal: true
- uid: MLEM.Input.InputHandler.IsKeyUp*
  commentId: Overload:MLEM.Input.InputHandler.IsKeyUp
  name: IsKeyUp
  nameWithType: InputHandler.IsKeyUp
  fullName: MLEM.Input.InputHandler.IsKeyUp
- uid: MLEM.Input.InputHandler.WasKeyDown*
  commentId: Overload:MLEM.Input.InputHandler.WasKeyDown
  name: WasKeyDown
  nameWithType: InputHandler.WasKeyDown
  fullName: MLEM.Input.InputHandler.WasKeyDown
- uid: MLEM.Input.InputHandler.WasKeyUp*
  commentId: Overload:MLEM.Input.InputHandler.WasKeyUp
  name: WasKeyUp
  nameWithType: InputHandler.WasKeyUp
  fullName: MLEM.Input.InputHandler.WasKeyUp
- uid: MLEM.Input.InputHandler.IsKeyPressed*
  commentId: Overload:MLEM.Input.InputHandler.IsKeyPressed
  name: IsKeyPressed
  nameWithType: InputHandler.IsKeyPressed
  fullName: MLEM.Input.InputHandler.IsKeyPressed
- uid: MLEM.Input.InputHandler.IsModifierKeyDown*
  commentId: Overload:MLEM.Input.InputHandler.IsModifierKeyDown
  name: IsModifierKeyDown
  nameWithType: InputHandler.IsModifierKeyDown
  fullName: MLEM.Input.InputHandler.IsModifierKeyDown
- uid: MLEM.Input.ModifierKey
  commentId: T:MLEM.Input.ModifierKey
  parent: MLEM.Input
  name: ModifierKey
  nameWithType: ModifierKey
  fullName: MLEM.Input.ModifierKey
- uid: MLEM.Input.InputHandler.IsMouseButtonDown*
  commentId: Overload:MLEM.Input.InputHandler.IsMouseButtonDown
  name: IsMouseButtonDown
  nameWithType: InputHandler.IsMouseButtonDown
  fullName: MLEM.Input.InputHandler.IsMouseButtonDown
- uid: MLEM.Input.MouseButton
  commentId: T:MLEM.Input.MouseButton
  parent: MLEM.Input
  name: MouseButton
  nameWithType: MouseButton
  fullName: MLEM.Input.MouseButton
- uid: MLEM.Input.InputHandler.IsMouseButtonUp*
  commentId: Overload:MLEM.Input.InputHandler.IsMouseButtonUp
  name: IsMouseButtonUp
  nameWithType: InputHandler.IsMouseButtonUp
  fullName: MLEM.Input.InputHandler.IsMouseButtonUp
- uid: MLEM.Input.InputHandler.WasMouseButtonDown*
  commentId: Overload:MLEM.Input.InputHandler.WasMouseButtonDown
  name: WasMouseButtonDown
  nameWithType: InputHandler.WasMouseButtonDown
  fullName: MLEM.Input.InputHandler.WasMouseButtonDown
- uid: MLEM.Input.InputHandler.WasMouseButtonUp*
  commentId: Overload:MLEM.Input.InputHandler.WasMouseButtonUp
  name: WasMouseButtonUp
  nameWithType: InputHandler.WasMouseButtonUp
  fullName: MLEM.Input.InputHandler.WasMouseButtonUp
- uid: MLEM.Input.InputHandler.IsMouseButtonPressed*
  commentId: Overload:MLEM.Input.InputHandler.IsMouseButtonPressed
  name: IsMouseButtonPressed
  nameWithType: InputHandler.IsMouseButtonPressed
  fullName: MLEM.Input.InputHandler.IsMouseButtonPressed
- uid: Microsoft.Xna.Framework.Input.GamePadState.IsButtonDown(Microsoft.Xna.Framework.Input.Buttons)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonDown(Microsoft.Xna.Framework.Input.Buttons)
  isExternal: true
- uid: MLEM.Input.InputHandler.IsGamepadButtonDown*
  commentId: Overload:MLEM.Input.InputHandler.IsGamepadButtonDown
  name: IsGamepadButtonDown
  nameWithType: InputHandler.IsGamepadButtonDown
  fullName: MLEM.Input.InputHandler.IsGamepadButtonDown
- uid: Microsoft.Xna.Framework.Input.Buttons
  commentId: T:Microsoft.Xna.Framework.Input.Buttons
  parent: Microsoft.Xna.Framework.Input
  isExternal: true
  name: Buttons
  nameWithType: Buttons
  fullName: Microsoft.Xna.Framework.Input.Buttons
- uid: Microsoft.Xna.Framework.Input.GamePadState.IsButtonUp(Microsoft.Xna.Framework.Input.Buttons)
  commentId: M:Microsoft.Xna.Framework.Input.GamePadState.IsButtonUp(Microsoft.Xna.Framework.Input.Buttons)
  isExternal: true
- uid: MLEM.Input.InputHandler.IsGamepadButtonUp*
  commentId: Overload:MLEM.Input.InputHandler.IsGamepadButtonUp
  name: IsGamepadButtonUp
  nameWithType: InputHandler.IsGamepadButtonUp
  fullName: MLEM.Input.InputHandler.IsGamepadButtonUp
- uid: MLEM.Input.InputHandler.WasGamepadButtonDown*
  commentId: Overload:MLEM.Input.InputHandler.WasGamepadButtonDown
  name: WasGamepadButtonDown
  nameWithType: InputHandler.WasGamepadButtonDown
  fullName: MLEM.Input.InputHandler.WasGamepadButtonDown
- uid: MLEM.Input.InputHandler.WasGamepadButtonUp*
  commentId: Overload:MLEM.Input.InputHandler.WasGamepadButtonUp
  name: WasGamepadButtonUp
  nameWithType: InputHandler.WasGamepadButtonUp
  fullName: MLEM.Input.InputHandler.WasGamepadButtonUp
- uid: MLEM.Input.InputHandler.IsGamepadButtonPressed*
  commentId: Overload:MLEM.Input.InputHandler.IsGamepadButtonPressed
  name: IsGamepadButtonPressed
  nameWithType: InputHandler.IsGamepadButtonPressed
  fullName: MLEM.Input.InputHandler.IsGamepadButtonPressed
- uid: MLEM.Input.InputHandler.GetGesture*
  commentId: Overload:MLEM.Input.InputHandler.GetGesture
  name: GetGesture
  nameWithType: InputHandler.GetGesture
  fullName: MLEM.Input.InputHandler.GetGesture
- uid: Microsoft.Xna.Framework.Input.Touch.GestureType
  commentId: T:Microsoft.Xna.Framework.Input.Touch.GestureType
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: GestureType
  nameWithType: GestureType
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureType
- uid: Microsoft.Xna.Framework.Input.Touch.GestureSample
  commentId: T:Microsoft.Xna.Framework.Input.Touch.GestureSample
  parent: Microsoft.Xna.Framework.Input.Touch
  isExternal: true
  name: GestureSample
  nameWithType: GestureSample
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureSample
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: MLEM.Input.InputHandler.IsDown*
  commentId: Overload:MLEM.Input.InputHandler.IsDown
  name: IsDown
  nameWithType: InputHandler.IsDown
  fullName: MLEM.Input.InputHandler.IsDown
- uid: MLEM.Input.InputHandler.IsUp*
  commentId: Overload:MLEM.Input.InputHandler.IsUp
  name: IsUp
  nameWithType: InputHandler.IsUp
  fullName: MLEM.Input.InputHandler.IsUp
- uid: MLEM.Input.InputHandler.IsPressed*
  commentId: Overload:MLEM.Input.InputHandler.IsPressed
  name: IsPressed
  nameWithType: InputHandler.IsPressed
  fullName: MLEM.Input.InputHandler.IsPressed
- uid: MLEM.Input.InputHandler.IsDown(System.Object,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsDown(System.Object,System.Int32)
  isExternal: true
- uid: MLEM.Input.InputHandler.IsAnyDown*
  commentId: Overload:MLEM.Input.InputHandler.IsAnyDown
  name: IsAnyDown
  nameWithType: InputHandler.IsAnyDown
  fullName: MLEM.Input.InputHandler.IsAnyDown
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MLEM.Input.InputHandler.IsUp(System.Object,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsUp(System.Object,System.Int32)
  isExternal: true
- uid: MLEM.Input.InputHandler.IsAnyUp*
  commentId: Overload:MLEM.Input.InputHandler.IsAnyUp
  name: IsAnyUp
  nameWithType: InputHandler.IsAnyUp
  fullName: MLEM.Input.InputHandler.IsAnyUp
- uid: MLEM.Input.InputHandler.IsPressed(System.Object,System.Int32)
  commentId: M:MLEM.Input.InputHandler.IsPressed(System.Object,System.Int32)
  isExternal: true
- uid: MLEM.Input.InputHandler.IsAnyPressed*
  commentId: Overload:MLEM.Input.InputHandler.IsAnyPressed
  name: IsAnyPressed
  nameWithType: InputHandler.IsAnyPressed
  fullName: MLEM.Input.InputHandler.IsAnyPressed
- uid: Microsoft.Xna.Framework.Input.Touch.TouchPanel
  commentId: T:Microsoft.Xna.Framework.Input.Touch.TouchPanel
  isExternal: true
- uid: MLEM.Input.InputHandler.EnableGestures*
  commentId: Overload:MLEM.Input.InputHandler.EnableGestures
  name: EnableGestures
  nameWithType: InputHandler.EnableGestures
  fullName: MLEM.Input.InputHandler.EnableGestures
- uid: Microsoft.Xna.Framework.Input.Touch.GestureType[]
  isExternal: true
  name: GestureType[]
  nameWithType: GestureType[]
  fullName: Microsoft.Xna.Framework.Input.Touch.GestureType[]
  nameWithType.vb: GestureType()
  fullName.vb: Microsoft.Xna.Framework.Input.Touch.GestureType()
  name.vb: GestureType()
  spec.csharp:
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    nameWithType: GestureType
    fullName: Microsoft.Xna.Framework.Input.Touch.GestureType
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Xna.Framework.Input.Touch.GestureType
    name: GestureType
    nameWithType: GestureType
    fullName: Microsoft.Xna.Framework.Input.Touch.GestureType
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
