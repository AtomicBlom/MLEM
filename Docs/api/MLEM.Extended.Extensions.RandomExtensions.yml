### YamlMime:ManagedReference
items:
- uid: MLEM.Extended.Extensions.RandomExtensions
  commentId: T:MLEM.Extended.Extensions.RandomExtensions
  id: RandomExtensions
  parent: MLEM.Extended.Extensions
  children:
  - MLEM.Extended.Extensions.RandomExtensions.NextVector2(System.Random,System.Single,System.Single)
  - MLEM.Extended.Extensions.RandomExtensions.Range(System.Random,MonoGame.Extended.Range{System.Int32})
  - MLEM.Extended.Extensions.RandomExtensions.Range(System.Random,MonoGame.Extended.Range{System.Single})
  langs:
  - csharp
  - vb
  name: RandomExtensions
  nameWithType: RandomExtensions
  fullName: MLEM.Extended.Extensions.RandomExtensions
  type: Class
  source:
    remote:
      path: MLEM.Extended/Extensions/RandomExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: RandomExtensions
    path: ../MLEM.Extended/Extensions/RandomExtensions.cs
    startLine: 5
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  syntax:
    content: public static class RandomExtensions
    content.vb: Public Module RandomExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MLEM.Extended.Extensions.RandomExtensions.Range(System.Random,MonoGame.Extended.Range{System.Int32})
  commentId: M:MLEM.Extended.Extensions.RandomExtensions.Range(System.Random,MonoGame.Extended.Range{System.Int32})
  id: Range(System.Random,MonoGame.Extended.Range{System.Int32})
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.RandomExtensions
  langs:
  - csharp
  - vb
  name: Range(Random, Range<Int32>)
  nameWithType: RandomExtensions.Range(Random, Range<Int32>)
  fullName: MLEM.Extended.Extensions.RandomExtensions.Range(System.Random, MonoGame.Extended.Range<System.Int32>)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/RandomExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Range
    path: ../MLEM.Extended/Extensions/RandomExtensions.cs
    startLine: 7
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  syntax:
    content: public static int Range(this Random random, Range<int> range)
    parameters:
    - id: random
      type: System.Random
    - id: range
      type: MonoGame.Extended.Range{System.Int32}
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Range(random As Random, range As Range(Of Integer)) As Integer
  overload: MLEM.Extended.Extensions.RandomExtensions.Range*
  nameWithType.vb: RandomExtensions.Range(Random, Range(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MLEM.Extended.Extensions.RandomExtensions.Range(System.Random, MonoGame.Extended.Range(Of System.Int32))
  name.vb: Range(Random, Range(Of Int32))
- uid: MLEM.Extended.Extensions.RandomExtensions.Range(System.Random,MonoGame.Extended.Range{System.Single})
  commentId: M:MLEM.Extended.Extensions.RandomExtensions.Range(System.Random,MonoGame.Extended.Range{System.Single})
  id: Range(System.Random,MonoGame.Extended.Range{System.Single})
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.RandomExtensions
  langs:
  - csharp
  - vb
  name: Range(Random, Range<Single>)
  nameWithType: RandomExtensions.Range(Random, Range<Single>)
  fullName: MLEM.Extended.Extensions.RandomExtensions.Range(System.Random, MonoGame.Extended.Range<System.Single>)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/RandomExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Range
    path: ../MLEM.Extended/Extensions/RandomExtensions.cs
    startLine: 11
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  syntax:
    content: public static float Range(this Random random, Range<float> range)
    parameters:
    - id: random
      type: System.Random
    - id: range
      type: MonoGame.Extended.Range{System.Single}
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Range(random As Random, range As Range(Of Single)) As Single
  overload: MLEM.Extended.Extensions.RandomExtensions.Range*
  nameWithType.vb: RandomExtensions.Range(Random, Range(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MLEM.Extended.Extensions.RandomExtensions.Range(System.Random, MonoGame.Extended.Range(Of System.Single))
  name.vb: Range(Random, Range(Of Single))
- uid: MLEM.Extended.Extensions.RandomExtensions.NextVector2(System.Random,System.Single,System.Single)
  commentId: M:MLEM.Extended.Extensions.RandomExtensions.NextVector2(System.Random,System.Single,System.Single)
  id: NextVector2(System.Random,System.Single,System.Single)
  isExtensionMethod: true
  parent: MLEM.Extended.Extensions.RandomExtensions
  langs:
  - csharp
  - vb
  name: NextVector2(Random, Single, Single)
  nameWithType: RandomExtensions.NextVector2(Random, Single, Single)
  fullName: MLEM.Extended.Extensions.RandomExtensions.NextVector2(System.Random, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: MLEM.Extended/Extensions/RandomExtensions.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: NextVector2
    path: ../MLEM.Extended/Extensions/RandomExtensions.cs
    startLine: 15
  assemblies:
  - MLEM.Extended
  namespace: MLEM.Extended.Extensions
  syntax:
    content: public static Vector2 NextVector2(this Random random, float min, float max)
    parameters:
    - id: random
      type: System.Random
    - id: min
      type: System.Single
    - id: max
      type: System.Single
    return:
      type: Microsoft.Xna.Framework.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NextVector2(random As Random, min As Single, max As Single) As Vector2
  overload: MLEM.Extended.Extensions.RandomExtensions.NextVector2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: MLEM.Extended.Extensions
  commentId: N:MLEM.Extended.Extensions
  name: MLEM.Extended.Extensions
  nameWithType: MLEM.Extended.Extensions
  fullName: MLEM.Extended.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Extended.Extensions.RandomExtensions.Range*
  commentId: Overload:MLEM.Extended.Extensions.RandomExtensions.Range
  name: Range
  nameWithType: RandomExtensions.Range
  fullName: MLEM.Extended.Extensions.RandomExtensions.Range
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: MonoGame.Extended.Range{System.Int32}
  commentId: T:MonoGame.Extended.Range{System.Int32}
  parent: MonoGame.Extended
  definition: MonoGame.Extended.Range`1
  name: Range<Int32>
  nameWithType: Range<Int32>
  fullName: MonoGame.Extended.Range<System.Int32>
  nameWithType.vb: Range(Of Int32)
  fullName.vb: MonoGame.Extended.Range(Of System.Int32)
  name.vb: Range(Of Int32)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MonoGame.Extended.Range`1
  commentId: T:MonoGame.Extended.Range`1
  isExternal: true
  name: Range<T>
  nameWithType: Range<T>
  fullName: MonoGame.Extended.Range<T>
  nameWithType.vb: Range(Of T)
  fullName.vb: MonoGame.Extended.Range(Of T)
  name.vb: Range(Of T)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MonoGame.Extended
  commentId: N:MonoGame.Extended
  isExternal: true
  name: MonoGame.Extended
  nameWithType: MonoGame.Extended
  fullName: MonoGame.Extended
- uid: MonoGame.Extended.Range{System.Single}
  commentId: T:MonoGame.Extended.Range{System.Single}
  parent: MonoGame.Extended
  definition: MonoGame.Extended.Range`1
  name: Range<Single>
  nameWithType: Range<Single>
  fullName: MonoGame.Extended.Range<System.Single>
  nameWithType.vb: Range(Of Single)
  fullName.vb: MonoGame.Extended.Range(Of System.Single)
  name.vb: Range(Of Single)
  spec.csharp:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MonoGame.Extended.Range`1
    name: Range
    nameWithType: Range
    fullName: MonoGame.Extended.Range
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: MLEM.Extended.Extensions.RandomExtensions.NextVector2*
  commentId: Overload:MLEM.Extended.Extensions.RandomExtensions.NextVector2
  name: NextVector2
  nameWithType: RandomExtensions.NextVector2
  fullName: MLEM.Extended.Extensions.RandomExtensions.NextVector2
- uid: Microsoft.Xna.Framework.Vector2
  commentId: T:Microsoft.Xna.Framework.Vector2
  parent: Microsoft.Xna.Framework
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Microsoft.Xna.Framework.Vector2
- uid: Microsoft.Xna.Framework
  commentId: N:Microsoft.Xna.Framework
  isExternal: true
  name: Microsoft.Xna.Framework
  nameWithType: Microsoft.Xna.Framework
  fullName: Microsoft.Xna.Framework
