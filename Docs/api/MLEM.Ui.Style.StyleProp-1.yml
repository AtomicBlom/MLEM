### YamlMime:ManagedReference
items:
- uid: MLEM.Ui.Style.StyleProp`1
  commentId: T:MLEM.Ui.Style.StyleProp`1
  id: StyleProp`1
  parent: MLEM.Ui.Style
  children:
  - MLEM.Ui.Style.StyleProp`1.#ctor(`0)
  - MLEM.Ui.Style.StyleProp`1.HasValue
  - MLEM.Ui.Style.StyleProp`1.op_Implicit(`0)~MLEM.Ui.Style.StyleProp{`0}
  - MLEM.Ui.Style.StyleProp`1.op_Implicit(MLEM.Ui.Style.StyleProp{`0})~`0
  - MLEM.Ui.Style.StyleProp`1.OrDefault(`0)
  - MLEM.Ui.Style.StyleProp`1.Set(`0)
  - MLEM.Ui.Style.StyleProp`1.SetFromStyle(`0)
  - MLEM.Ui.Style.StyleProp`1.Value
  langs:
  - csharp
  - vb
  name: StyleProp<T>
  nameWithType: StyleProp<T>
  fullName: MLEM.Ui.Style.StyleProp<T>
  type: Struct
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: StyleProp
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 3
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public struct StyleProp<T>
    typeParameters:
    - id: T
    content.vb: Public Structure StyleProp(Of T)
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: StyleProp(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T)
  name.vb: StyleProp(Of T)
- uid: MLEM.Ui.Style.StyleProp`1.Value
  commentId: P:MLEM.Ui.Style.StyleProp`1.Value
  id: Value
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: StyleProp<T>.Value
  fullName: MLEM.Ui.Style.StyleProp<T>.Value
  type: Property
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Value
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 5
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: MLEM.Ui.Style.StyleProp`1.Value*
  nameWithType.vb: StyleProp(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).Value
- uid: MLEM.Ui.Style.StyleProp`1.#ctor(`0)
  commentId: M:MLEM.Ui.Style.StyleProp`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: StyleProp(T)
  nameWithType: StyleProp<T>.StyleProp(T)
  fullName: MLEM.Ui.Style.StyleProp<T>.StyleProp(T)
  type: Constructor
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: .ctor
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 8
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public StyleProp(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub New(value As T)
  overload: MLEM.Ui.Style.StyleProp`1.#ctor*
  nameWithType.vb: StyleProp(Of T).StyleProp(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).StyleProp(T)
- uid: MLEM.Ui.Style.StyleProp`1.SetFromStyle(`0)
  commentId: M:MLEM.Ui.Style.StyleProp`1.SetFromStyle(`0)
  id: SetFromStyle(`0)
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: SetFromStyle(T)
  nameWithType: StyleProp<T>.SetFromStyle(T)
  fullName: MLEM.Ui.Style.StyleProp<T>.SetFromStyle(T)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: SetFromStyle
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 13
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public void SetFromStyle(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub SetFromStyle(value As T)
  overload: MLEM.Ui.Style.StyleProp`1.SetFromStyle*
  nameWithType.vb: StyleProp(Of T).SetFromStyle(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).SetFromStyle(T)
- uid: MLEM.Ui.Style.StyleProp`1.Set(`0)
  commentId: M:MLEM.Ui.Style.StyleProp`1.Set(`0)
  id: Set(`0)
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: Set(T)
  nameWithType: StyleProp<T>.Set(T)
  fullName: MLEM.Ui.Style.StyleProp<T>.Set(T)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: Set
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 19
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public void Set(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub Set(value As T)
  overload: MLEM.Ui.Style.StyleProp`1.Set*
  nameWithType.vb: StyleProp(Of T).Set(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).Set(T)
- uid: MLEM.Ui.Style.StyleProp`1.OrDefault(`0)
  commentId: M:MLEM.Ui.Style.StyleProp`1.OrDefault(`0)
  id: OrDefault(`0)
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: OrDefault(T)
  nameWithType: StyleProp<T>.OrDefault(T)
  fullName: MLEM.Ui.Style.StyleProp<T>.OrDefault(T)
  type: Method
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: OrDefault
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 24
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public T OrDefault(T def)
    parameters:
    - id: def
      type: '{T}'
    return:
      type: '{T}'
    content.vb: Public Function OrDefault(def As T) As T
  overload: MLEM.Ui.Style.StyleProp`1.OrDefault*
  nameWithType.vb: StyleProp(Of T).OrDefault(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).OrDefault(T)
- uid: MLEM.Ui.Style.StyleProp`1.HasValue
  commentId: M:MLEM.Ui.Style.StyleProp`1.HasValue
  id: HasValue
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: HasValue()
  nameWithType: StyleProp<T>.HasValue()
  fullName: MLEM.Ui.Style.StyleProp<T>.HasValue()
  type: Method
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: HasValue
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 28
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public bool HasValue()
    return:
      type: System.Boolean
    content.vb: Public Function HasValue As Boolean
  overload: MLEM.Ui.Style.StyleProp`1.HasValue*
  nameWithType.vb: StyleProp(Of T).HasValue()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).HasValue()
- uid: MLEM.Ui.Style.StyleProp`1.op_Implicit(MLEM.Ui.Style.StyleProp{`0})~`0
  commentId: M:MLEM.Ui.Style.StyleProp`1.op_Implicit(MLEM.Ui.Style.StyleProp{`0})~`0
  id: op_Implicit(MLEM.Ui.Style.StyleProp{`0})~`0
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: Implicit(StyleProp<T> to T)
  nameWithType: StyleProp<T>.Implicit(StyleProp<T> to T)
  fullName: MLEM.Ui.Style.StyleProp<T>.Implicit(MLEM.Ui.Style.StyleProp<T> to T)
  type: Operator
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 32
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public static implicit operator T(StyleProp<T> prop)
    parameters:
    - id: prop
      type: MLEM.Ui.Style.StyleProp`1
    return:
      type: '{T}'
    content.vb: Public Shared Widening Operator CType(prop As StyleProp(Of T)) As T
  overload: MLEM.Ui.Style.StyleProp`1.op_Implicit*
  nameWithType.vb: StyleProp(Of T).Widening(StyleProp(Of T) to T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).Widening(MLEM.Ui.Style.StyleProp(Of T) to T)
  name.vb: Widening(StyleProp(Of T) to T)
- uid: MLEM.Ui.Style.StyleProp`1.op_Implicit(`0)~MLEM.Ui.Style.StyleProp{`0}
  commentId: M:MLEM.Ui.Style.StyleProp`1.op_Implicit(`0)~MLEM.Ui.Style.StyleProp{`0}
  id: op_Implicit(`0)~MLEM.Ui.Style.StyleProp{`0}
  parent: MLEM.Ui.Style.StyleProp`1
  langs:
  - csharp
  - vb
  name: Implicit(T to StyleProp<T>)
  nameWithType: StyleProp<T>.Implicit(T to StyleProp<T>)
  fullName: MLEM.Ui.Style.StyleProp<T>.Implicit(T to MLEM.Ui.Style.StyleProp<T>)
  type: Operator
  source:
    remote:
      path: MLEM.Ui/Style/StyleProp.cs
      branch: master
      repo: https://github.com/Ellpeck/MLEM
    id: op_Implicit
    path: ../MLEM.Ui/Style/StyleProp.cs
    startLine: 36
  assemblies:
  - MLEM.Ui
  namespace: MLEM.Ui.Style
  syntax:
    content: public static implicit operator StyleProp<T>(T prop)
    parameters:
    - id: prop
      type: '{T}'
    return:
      type: MLEM.Ui.Style.StyleProp`1
    content.vb: Public Shared Widening Operator CType(prop As T) As StyleProp(Of T)
  overload: MLEM.Ui.Style.StyleProp`1.op_Implicit*
  nameWithType.vb: StyleProp(Of T).Widening(T to StyleProp(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).Widening(T to MLEM.Ui.Style.StyleProp(Of T))
  name.vb: Widening(T to StyleProp(Of T))
references:
- uid: MLEM.Ui.Style
  commentId: N:MLEM.Ui.Style
  name: MLEM.Ui.Style
  nameWithType: MLEM.Ui.Style
  fullName: MLEM.Ui.Style
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MLEM.Ui.Style.StyleProp`1.Value*
  commentId: Overload:MLEM.Ui.Style.StyleProp`1.Value
  name: Value
  nameWithType: StyleProp<T>.Value
  fullName: MLEM.Ui.Style.StyleProp<T>.Value
  nameWithType.vb: StyleProp(Of T).Value
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MLEM.Ui.Style.StyleProp`1.#ctor*
  commentId: Overload:MLEM.Ui.Style.StyleProp`1.#ctor
  name: StyleProp
  nameWithType: StyleProp<T>.StyleProp
  fullName: MLEM.Ui.Style.StyleProp<T>.StyleProp
  nameWithType.vb: StyleProp(Of T).StyleProp
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).StyleProp
- uid: MLEM.Ui.Style.StyleProp`1.SetFromStyle*
  commentId: Overload:MLEM.Ui.Style.StyleProp`1.SetFromStyle
  name: SetFromStyle
  nameWithType: StyleProp<T>.SetFromStyle
  fullName: MLEM.Ui.Style.StyleProp<T>.SetFromStyle
  nameWithType.vb: StyleProp(Of T).SetFromStyle
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).SetFromStyle
- uid: MLEM.Ui.Style.StyleProp`1.Set*
  commentId: Overload:MLEM.Ui.Style.StyleProp`1.Set
  name: Set
  nameWithType: StyleProp<T>.Set
  fullName: MLEM.Ui.Style.StyleProp<T>.Set
  nameWithType.vb: StyleProp(Of T).Set
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).Set
- uid: MLEM.Ui.Style.StyleProp`1.OrDefault*
  commentId: Overload:MLEM.Ui.Style.StyleProp`1.OrDefault
  name: OrDefault
  nameWithType: StyleProp<T>.OrDefault
  fullName: MLEM.Ui.Style.StyleProp<T>.OrDefault
  nameWithType.vb: StyleProp(Of T).OrDefault
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).OrDefault
- uid: MLEM.Ui.Style.StyleProp`1.HasValue*
  commentId: Overload:MLEM.Ui.Style.StyleProp`1.HasValue
  name: HasValue
  nameWithType: StyleProp<T>.HasValue
  fullName: MLEM.Ui.Style.StyleProp<T>.HasValue
  nameWithType.vb: StyleProp(Of T).HasValue
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).HasValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MLEM.Ui.Style.StyleProp`1.op_Implicit*
  commentId: Overload:MLEM.Ui.Style.StyleProp`1.op_Implicit
  name: Implicit
  nameWithType: StyleProp<T>.Implicit
  fullName: MLEM.Ui.Style.StyleProp<T>.Implicit
  nameWithType.vb: StyleProp(Of T).Widening
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T).Widening
  name.vb: Widening
- uid: MLEM.Ui.Style.StyleProp`1
  commentId: T:MLEM.Ui.Style.StyleProp`1
  parent: MLEM.Ui.Style
  name: StyleProp<T>
  nameWithType: StyleProp<T>
  fullName: MLEM.Ui.Style.StyleProp<T>
  nameWithType.vb: StyleProp(Of T)
  fullName.vb: MLEM.Ui.Style.StyleProp(Of T)
  name.vb: StyleProp(Of T)
  spec.csharp:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    nameWithType: StyleProp
    fullName: MLEM.Ui.Style.StyleProp
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MLEM.Ui.Style.StyleProp`1
    name: StyleProp
    nameWithType: StyleProp
    fullName: MLEM.Ui.Style.StyleProp
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
